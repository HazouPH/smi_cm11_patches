From: Intel

Fix video flickering.

diff --git a/include/media/stagefright/OMXCodec.h b/include/media/stagefright/OMXCodec.h
index 9b7a656..1d76c6d 100644
--- a/include/media/stagefright/OMXCodec.h
+++ b/include/media/stagefright/OMXCodec.h
@@ -110,6 +110,7 @@ struct OMXCodec : public MediaSource,
 #ifdef MTK_HARDWARE
         kAvoidMemcopyInputRecordingFrames     = 8192,
 #endif
+        kRequiresHoldExtraBuffers             = 65536,
 #if defined(OMAP_ENHANCEMENT)
         kAvoidMemcopyInputRecordingFrames     = 0x20000000,
 #endif
diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index 269028a..0f58d48 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -406,6 +406,10 @@ uint32_t OMXCodec::getComponentQuirks(
                 index, "defers-output-buffer-allocation")) {
         quirks |= kDefersOutputBufferAllocation;
     }
+    if (list->codecHasQuirk(
+                index, "requires-hold-extra-buffers")) {
+        quirks |= kRequiresHoldExtraBuffers;
+    }
 #ifdef DOLBY_UDC
     if (list->codecHasQuirk(
                 index, "needs-flush-before-disable")) {
@@ -2535,6 +2542,14 @@ status_t OMXCodec::allocateOutputBuffersFromNativeWindow() {
     ALOGI("NOTE: Overriding minUndequeuedBufs to %d",minUndequeuedBufs);
 #endif
 
+    // XXX: should hold extra two buffers in surface texture back end.
+    // Currently, intel hw overlay need always hold output buffer until
+    // flip to another buffer. So we should hold more buffers to avoid
+    // buffer overwrite by decoder.
+    if (mQuirks & kRequiresHoldExtraBuffers) {
+        minUndequeuedBufs += 2;
+    }
+
     // XXX: Is this the right logic to use?  It's not clear to me what the OMX
     // buffer counts refer to - how do they account for the renderer holding on
     // to buffers?
