From 6c553a1be7b2d80b3b8c7e22ae5fc8db6db0d2b8 Mon Sep 17 00:00:00 2001
From: Dan Liang <dan.liang@intel.com>
Date: Sun, 28 Apr 2013 16:47:57 +0800
Subject: [PATCH 14/56] libstagefright: enable video hw rotation

BZ: 69069 74797

original patch:
57996:libstagefright: Pass rotation info to hal
58939:libstagefright: Pass native window handle to hal.
73396:libstagefright: connect api after new surface texture client because
need to get the client info initialized from surface texture back end.
121216:libmediaplayerservice: check surfaceTexture before nativewindow api
disconnection or connection

Category: device enablement
Domain: Video.Rendering-rotation
Origin: internal
Upstream-Candidate: no

Change-Id: Ic0b6dccbdb800882bec79b68fd023cfa99cc745f
Orig-Change-Id: I78e14a1a2b17dc296c7d9317a714c365c48546d6
Orig-Change-Id: I751e7dea4837cb82b0b807e13d66b6a2fea8cadb
Signed-off-by: Jason Hu <jason.hu@intel.com>
Signed-off-by: ywan171 <yi.a.wang@intel.com>
Signed-off-by: Dan Liang <dan.liang@intel.com>

[PORT FROM MAIN]libmediaplayerservice: check surfaceTexture before nativewindow api disconnection or connection

BZ: 74797

nativewindow api disconnect or connect when surfaceTexture equals NULL will cause
TOMBSTONE error, should check surfaceTexture before native window api disconnection or
connection

Orig-Change-Id: I28c7cf9210a70d59a4226b282018332746f58722
---
 media/libmediaplayerservice/nuplayer/NuPlayer.cpp | 23 +++++++++++++--
 media/libstagefright/ACodec.cpp                   | 16 ++++++++++
 media/libstagefright/AwesomePlayer.cpp            | 21 ++++++++++++-
 media/libstagefright/OMXCodec.cpp                 | 36 +++++++++++++++++++++++
 4 files changed, 93 insertions(+), 3 deletions(-)

diff --git a/media/libmediaplayerservice/nuplayer/NuPlayer.cpp b/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
index 19fb0ad..3e695a6 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
+++ b/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
@@ -263,10 +263,29 @@ void NuPlayer::setVideoSurfaceTextureAsync(
     if (bufferProducer == NULL) {
         msg->setObject("native-window", NULL);
     } else {
+        sp<Surface> surface = new Surface(bufferProducer);
+        if (surface != NULL) {
+            sp<ANativeWindow> anw = surface;
+            //NOTES: we must re-connect api here because we need to get right
+            //infomation from surface texture's back end. Otherwise, we only get
+            //uninitlized mTransformHint, mDefaultWidth, mDefaultHeight, etc.
+            status_t err = native_window_api_disconnect(anw.get(),
+                    NATIVE_WINDOW_API_MEDIA);
+            if (err != OK) {
+                ALOGE("setVideoSurfaceTextureAsync: api disconnect failed: %d", err);
+                return;
+            }
+
+            err = native_window_api_connect(anw.get(),
+                    NATIVE_WINDOW_API_MEDIA);
+            if (err != OK) {
+                ALOGE("setVideoSurfaceTextureAsync: api connect failed: %d", err);
+                return;
+            }
+        }
         msg->setObject(
                 "native-window",
-                new NativeWindowWrapper(
-                    new Surface(bufferProducer)));
+                new NativeWindowWrapper(surface));
     }
 
     msg->post();
diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index ee5341a..e57b45d 100755
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -2616,6 +2616,22 @@ status_t ACodec::setVideoFormatOnPort(
 
 status_t ACodec::initNativeWindow() {
     if (mNativeWindow != NULL) {
+        if (mOMX->livesLocally(mNode,getpid())){
+            OMX_PARAM_PORTDEFINITIONTYPE def;
+            OMX_VIDEO_PORTDEFINITIONTYPE *video_def = &def.format.video;
+
+            InitOMXParams(&def);
+            def.nPortIndex = kPortIndexInput;
+
+            status_t err = mOMX->getParameter(
+                    mNode, OMX_IndexParamPortDefinition, &def, sizeof(def));
+            CHECK_EQ(err, (status_t)OK);
+
+            ALOGD("set NativeWindow = %p",mNativeWindow.get());
+            video_def->pNativeWindow = mNativeWindow.get();
+            err = mOMX->setParameter(
+                    mNode, OMX_IndexParamPortDefinition, &def, sizeof(def));
+        }
         return mOMX->enableGraphicBuffers(mNode, kPortIndexOutput, OMX_TRUE);
     }
 
diff --git a/media/libstagefright/AwesomePlayer.cpp b/media/libstagefright/AwesomePlayer.cpp
index 8e2f26c..d169512 100644
--- a/media/libstagefright/AwesomePlayer.cpp
+++ b/media/libstagefright/AwesomePlayer.cpp
@@ -1564,8 +1564,27 @@ status_t AwesomePlayer::setSurfaceTexture(const sp<IGraphicBufferProducer> &buff
     Mutex::Autolock autoLock(mLock);
 
     status_t err;
+
     if (bufferProducer != NULL) {
-        err = setNativeWindow_l(new Surface(bufferProducer));
+        sp<ANativeWindow> anw = new Surface(bufferProducer);
+        //NOTES: we must re-connect api here because we need to get right
+        //infomation from surface texture's back end. Otherwise, we only get
+        //uninitlized mTransformHint, mDefaultWidth, mDefaultHeight, etc.
+        status_t err = native_window_api_disconnect(anw.get(),
+                NATIVE_WINDOW_API_MEDIA);
+        if (err != OK) {
+            ALOGE("setSurfaceTexture: api disconnect failed: %d", err);
+            return err;
+        }
+
+        err = native_window_api_connect(anw.get(),
+                NATIVE_WINDOW_API_MEDIA);
+        if (err != OK) {
+            ALOGE("setSurfaceTexture: api connect failed: %d", err);
+            return err;
+        }
+
+        err = setNativeWindow_l(anw);
     } else {
         err = setNativeWindow_l(NULL);
     }
diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index fa1a442..e6c4196 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -1916,6 +1916,42 @@ status_t OMXCodec::setVideoOutputFormat(
     err = mOMX->setParameter(
             mNode, OMX_IndexParamPortDefinition, &def, sizeof(def));
 
+    if (!strncmp(mComponentName, "OMX.Intel.VideoDecoder", 22)) {
+        sp<MetaData> meta = mSource->getFormat();
+
+        int32_t rotationDegrees;
+        if (!meta->findInt32(kKeyRotation, &rotationDegrees)) {
+            rotationDegrees = 0;
+        }
+        // set rotation for decoder
+        OMX_INDEXTYPE index;
+
+        status_t error =
+            mOMX->getExtensionIndex(
+                mNode,
+                "OMX.Intel.index.rotation",
+                &index);
+        if (error == OK) {
+            error = mOMX->setParameter(mNode, index, (void*)&rotationDegrees, sizeof(int32_t));
+        } else {
+            // ingore this error
+            ALOGW("Set decode rotation failed");
+        }
+
+        if (mNativeWindow != NULL && mOMX->livesLocally(mNode,getpid())){
+            InitOMXParams(&def);
+            def.nPortIndex = kPortIndexInput;
+
+            err = mOMX->getParameter(
+                    mNode, OMX_IndexParamPortDefinition, &def, sizeof(def));
+            CHECK_EQ(err, (status_t)OK);
+
+            ALOGD("set NativeWindow = %p",mNativeWindow.get());
+            video_def->pNativeWindow = mNativeWindow.get();
+            err = mOMX->setParameter(
+                    mNode, OMX_IndexParamPortDefinition, &def, sizeof(def));
+        }
+    }
     return err;
 }
 
-- 
2.7.4

