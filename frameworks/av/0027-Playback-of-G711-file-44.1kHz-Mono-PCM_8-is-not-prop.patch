From 5d1a53d3c95200f7047bfbd7ef65ae3b34852202 Mon Sep 17 00:00:00 2001
From: Muthukumar K <muthukumar.kandasamy@intel.com>
Date: Tue, 28 Aug 2012 19:01:19 +0530
Subject: [PATCH 27/56] Playback of G711 file (44.1kHz, Mono, PCM_8) is not
 proper

BZ: 53601

G711 codec in Android assumes 8k as the sample rate. This has
been changed to take the samplerate from the content.
A new quirk is added for this.

Category: aosp improvement
Domain: AUDIO_MEDIA-Audio Codec
Origin: Internal
Upstream-Candidate: yes

Change-Id: I98262fde6e642a571c3bef1b50e92ebf45c6a1ed
Orig-Change-Id: I6529ca46596f71da52fff39083beca9a5ee1a7dc
---
 include/media/stagefright/OMXCodec.h |  3 ++-
 media/libstagefright/OMXCodec.cpp    | 20 ++++++++++++++++----
 2 files changed, 18 insertions(+), 5 deletions(-)

diff --git a/include/media/stagefright/OMXCodec.h b/include/media/stagefright/OMXCodec.h
index b96f514..babb4fa 100644
--- a/include/media/stagefright/OMXCodec.h
+++ b/include/media/stagefright/OMXCodec.h
@@ -111,6 +111,7 @@ struct OMXCodec : public MediaSource,
         kAvoidMemcopyInputRecordingFrames     = 8192,
 #endif
         kRequiresHoldExtraBuffers             = 65536,
+        kRequiresSampleRate                   = 131072,
 #if defined(OMAP_ENHANCEMENT)
         kAvoidMemcopyInputRecordingFrames     = 0x20000000,
 #endif
@@ -279,7 +280,7 @@ private:
             int32_t numChannels, int32_t sampleRate, int32_t bitRate,
             int32_t aacProfile, bool isADTS);
 
-    void setG711Format(int32_t numChannels);
+    void setG711Format(int32_t numChannels, int32_t sampleRate);
 
     status_t setVideoPortFormatType(
             OMX_U32 portIndex,
diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index 6dc81bc..c417fba 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -413,6 +413,10 @@ uint32_t OMXCodec::getComponentQuirks(
         quirks |= kSupportsMultipleFramesPerInputBuffer;
     }
     if (list->codecHasQuirk(
+                index, "codec-requires-samplerate")) {
+        quirks |= kRequiresSampleRate;
+    }
+    if (list->codecHasQuirk(
                 index, "requires-allocate-on-input-ports")) {
         quirks |= kRequiresAllocateBufferOnInputPorts;
     }
@@ -915,7 +919,10 @@ status_t OMXCodec::configureCodec(const sp<MetaData> &meta) {
         int32_t numChannels;
         CHECK(meta->findInt32(kKeyChannelCount, &numChannels));
 
-        setG711Format(numChannels);
+        int32_t sampleRate;
+        CHECK(meta->findInt32(kKeySampleRate, &sampleRate));
+
+        setG711Format(numChannels, sampleRate);
     } else if (!strcasecmp(MEDIA_MIMETYPE_AUDIO_RAW, mMIME)) {
         CHECK(!mIsEncoder);
 
@@ -5025,9 +5032,9 @@ status_t OMXCodec::setFFmpegAudioFormat(const sp<MetaData> &meta)
     return err;
 }
 
-void OMXCodec::setG711Format(int32_t numChannels) {
+void OMXCodec::setG711Format(int32_t numChannels, int32_t sampleRate) {
     CHECK(!mIsEncoder);
-    setRawAudioFormat(kPortIndexInput, 8000, numChannels);
+    setRawAudioFormat(kPortIndexInput, sampleRate, numChannels);
 }
 
 void OMXCodec::setImageOutputFormat(
@@ -6118,7 +6125,12 @@ void OMXCodec::initOutputFormat(const sp<MetaData> &inputFormat) {
                         (mQuirks & kDecoderLiesAboutNumberOfChannels)
                             ? numChannels : params.nChannels);
 
-                mOutputFormat->setInt32(kKeySampleRate, params.nSamplingRate);
+                // The codec-reported sampleRate is not reliable. It assumes
+                // 8k always...
+                mOutputFormat->setInt32(
+                        kKeySampleRate,
+                        (mQuirks & kRequiresSampleRate)
+                            ? sampleRate : params.nSamplingRate);
             } else if (audio_def->eEncoding == OMX_AUDIO_CodingAMR) {
                 OMX_AUDIO_PARAM_AMRTYPE amr;
                 InitOMXParams(&amr);
-- 
2.7.4

