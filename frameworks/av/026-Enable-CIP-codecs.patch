From a313ad8a81f58e4242632958965fb92f2debbd22 Mon Sep 17 00:00:00 2001
From: Arulselvan M <arulselvan.m@intel.com>
Date: Thu, 2 May 2013 17:48:33 +0530
Subject: Enable CIP codecs

BZ: 117351

Change-Id: Iee752a2ce35db75983b595ae70f4067783f6f87d
Signed-off-by: Arulselvan M <arulselvan.m@intel.com>
---
 media/libstagefright/Android.mk   |   29 ++++++++++++++++
 media/libstagefright/OMXCodec.cpp |   65 +++++++++++++++++++++++++++++++++++++
 2 files changed, 94 insertions(+), 0 deletions(-)

diff --git a/media/libstagefright/Android.mk b/media/libstagefright/Android.mk
index e452882..10c04da 100644
--- a/media/libstagefright/Android.mk
+++ b/media/libstagefright/Android.mk
@@ -142,6 +142,35 @@ LOCAL_SHARED_LIBRARIES += libasfparser
 LOCAL_CPPFLAGS += -DUSE_INTEL_ASF_EXTRACTOR
 endif
 
+ifeq ($(USE_INTEL_MDP),true)
+LOCAL_C_INCLUDES += \
+          $(TARGET_OUT_HEADERS)/media_codecs
+
+LOCAL_STATIC_LIBRARIES += \
+          lib_stagefright_mdp_mp3dec \
+          libmc_mp3_dec \
+          lib_stagefright_mdp_aacdec \
+          libmc_aac_dec \
+          lib_stagefright_mdp_aacenc \
+          libmc_aac_enc \
+          lib_stagefright_mdp_amrnbdec \
+          libmc_gsmamr \
+          lib_stagefright_mdp_amrnbenc \
+          lib_stagefright_mdp_amrwbdec \
+          lib_stagefright_mdp_amrwbenc \
+          libmc_amrwb \
+          libmc_amrcommon \
+          lib_stagefright_mdp_vorbisdec \
+          libmc_vorbis_dec \
+          libmc_codec_common \
+          libmc_core \
+          lib_stagefright_mdp_wmadec \
+          libmc_wma_dec
+
+
+LOCAL_CPPFLAGS += -DUSE_INTEL_MDP
+endif
+
 LOCAL_SHARED_LIBRARIES += libstlport
 include external/stlport/libstlport.mk
 
diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index 0e4e330..4165c5f 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -77,6 +77,16 @@ static sp<MediaSource> Make##name(const sp<MediaSource> &source, const sp<MetaDa
 
 #ifdef USE_INTEL_MDP
 FACTORY_CREATE_DECL(CIPVP8Decoder)
+
+FACTORY_CREATE_DECL(CIPMP3Decoder)
+FACTORY_CREATE_DECL(CIPAACDecoder)
+FACTORY_CREATE_ENCODER_DECL(CIPAACEncoder)
+FACTORY_CREATE_DECL(CIPAMRNBDecoder)
+FACTORY_CREATE_ENCODER_DECL(CIPAMRNBEncoder)
+FACTORY_CREATE_DECL(CIPAMRWBDecoder)
+FACTORY_CREATE_ENCODER_DECL(CIPAMRWBEncoder)
+FACTORY_CREATE_DECL(CIPVorbisDecoder)
+FACTORY_CREATE_DECL(CIPWMADecoder)
 #endif
 
 #define FACTORY_REF(name) { #name, Make##name },
@@ -90,8 +100,20 @@ static sp<MediaSource> InstantiateSoftwareEncoder(
         const char *name;
         sp<MediaSource> (*CreateFunc)(const sp<MediaSource> &, const sp<MetaData> &);
     };
+    if (!strncmp(name, "CIPAACEncoder", 13)) {
+        int32_t aacProfile;
+        meta->findInt32(kKeyAACProfile, &aacProfile);
+        if(aacProfile != OMX_AUDIO_AACObjectLC) {
+           return NULL; //Use Google AAC encoder for all AAC profiles except AAC_LC.
+        }
+    }
 
     static const FactoryInfo kFactoryInfo[] = {
+#ifdef USE_INTEL_MDP
+        FACTORY_REF(CIPAMRNBEncoder)
+        FACTORY_REF(CIPAMRWBEncoder)
+        FACTORY_REF(CIPAACEncoder)
+#endif // #ifdef USE_INTEL_MDP
         FACTORY_REF(AACEncoder)
     };
     for (size_t i = 0;
@@ -104,6 +126,36 @@ static sp<MediaSource> InstantiateSoftwareEncoder(
 }
 #endif
 
+#ifdef USE_INTEL_MDP
+/* for SF decoders plug-ins */
+static sp<MediaSource> InstantiateSoftwareCodec(
+        const char *name, const sp<MediaSource> &source) {
+    struct FactoryInfo {
+        const char *name;
+        sp<MediaSource> (*CreateFunc)(const sp<MediaSource> &);
+    };
+
+    static const FactoryInfo kFactoryInfo[] = {
+
+        FACTORY_REF(CIPMP3Decoder)
+        FACTORY_REF(CIPAACDecoder)
+        FACTORY_REF(CIPAMRNBDecoder)
+        FACTORY_REF(CIPAMRWBDecoder)
+        FACTORY_REF(CIPVorbisDecoder)
+        FACTORY_REF(CIPWMADecoder)
+    };
+    for (size_t i = 0;
+         i < sizeof(kFactoryInfo) / sizeof(kFactoryInfo[0]); ++i) {
+        if (!strcmp(name, kFactoryInfo[i].name)) {
+           return (*kFactoryInfo[i].CreateFunc)(source);
+        }
+    }
+
+    return NULL;
+}
+#endif // #ifdef USE_INTEL_MDP
+
+
 #undef FACTORY_CREATE_ENCODER
 #undef FACTORY_REF
 
@@ -583,6 +583,7 @@ sp<MediaSource> OMXCodec::Create(
         }
 #endif
 
+#ifndef USE_INTEL_MDP
         sp<MediaSource> softwareCodec;
         if (createEncoder) {
             softwareCodec = InstantiateSoftwareEncoder(componentName, source, meta);
@@ -599,6 +600,18 @@ sp<MediaSource> OMXCodec::Create(
             return softwareCodec;
         }
 
+#else
+        sp<MediaSource> softwareCodec = (createEncoder)?
+            InstantiateSoftwareEncoder(componentName, source, meta):
+            InstantiateSoftwareCodec(componentName, source);
+
+            if (softwareCodec != NULL) {
+                ALOGV("Successfully allocated software codec '%s'", componentName);
+
+                return softwareCodec;
+            }
+#endif
+
 #ifdef QCOM_HARDWARE
         const char* ext_componentName = ExtendedCodec::overrideComponentName(quirks, meta);
         if(ext_componentName != NULL) {
-- 
1.7.4.1

