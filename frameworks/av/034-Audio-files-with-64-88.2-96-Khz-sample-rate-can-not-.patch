From bb6c7a33d1543d594cc6d34d8e41c8b8eb44b0b5 Mon Sep 17 00:00:00 2001
From: Arulselvan M <arulselvan.m@intel.com>
Date: Fri, 31 May 2013 00:04:22 +0530
Subject: Audio files with 64/88.2/96 Khz sample rate can not play.

BZ: 56363

The issue is due to the initial check verifying whether the
sampling rate is supported by Intel SRC and then playing
only the Intel SRC supported sampling rates. Putting this
check only for larger sampling rates > 2*(maximum supported
sampling rate) will allow the files having sampling rates
(64/88.2 Khz) <= 2*(maximum supported sampling rate),
that are not supported by Intel SRC to be played. Putting a
check for Intel SRC supported sampling rates in AudioTrack
will allow files having sampling rate of 96 Khz to be
played. This patch also enables logs for AudioResampler and
AudioResamplerIA.

Category: Feature Differentiation
Domain: AUDIO_MEDIA-Audio Framework
Origin: Internal
Upstream-Candidate: no, proprietary

Change-Id: I729a82890d4d0a711983e2da96f850fd7e625cf3
Orig-Change-Id: Ief741aabe7274de729727852a349d27cfa10d740
Signed-off-by: Charitardha <satya.charitardha.jayanti@intel.com>
Signed-off-by: Arulselvan M <arulselvan.m@intel.com>
---
 media/libmedia/Android.mk                  |    6 ++++++
 media/libmedia/AudioTrack.cpp              |   13 ++++++++++---
 services/audioflinger/AudioResampler.cpp   |    2 +-
 services/audioflinger/AudioResamplerIA.cpp |    2 +-
 services/audioflinger/Threads.cpp          |    8 ++++----
 5 files changed, 22 insertions(+), 9 deletions(-)

diff --git a/media/libmedia/Android.mk b/media/libmedia/Android.mk
index e05c88b..857a3ce 100644
--- a/media/libmedia/Android.mk
+++ b/media/libmedia/Android.mk
@@ -98,4 +98,10 @@ LOCAL_C_INCLUDES := \
     $(call include-path-for, audio-effects) \
     $(call include-path-for, audio-utils)
 
+ifeq ($(USE_INTEL_RSP), true)
+  LOCAL_CFLAGS += -DUSE_INTEL_RSP
+  LOCAL_C_INCLUDES += $(TARGET_OUT_HEADERS)/libaudioresample
+  LOCAL_SHARED_LIBRARIES += libaudioresample
+endif
+
 include $(BUILD_SHARED_LIBRARY)
diff --git a/media/libmedia/AudioTrack.cpp b/media/libmedia/AudioTrack.cpp
index 8b97020..24a5af6 100644
--- a/media/libmedia/AudioTrack.cpp
+++ b/media/libmedia/AudioTrack.cpp
@@ -37,7 +37,11 @@
 #define WAIT_PERIOD_MS                  10
 #define WAIT_STREAM_END_TIMEOUT_SEC     120
 
+#ifdef USE_INTEL_RSP
+#include "iasrc_resampler.h"
+#endif
 
+#define DEFAULT_MULTIPLIER 1
 namespace android {
 // ---------------------------------------------------------------------------
 
@@ -826,11 +830,15 @@ status_t AudioTrack::setSampleRate(uint32_t rate)
     // Resampler implementation limits input sampling rate to 2/4 x output sampling rate.
 #ifdef QTI_RESAMPLER
     if (rate == 0 || rate > afSamplingRate * 4) {
-#else
-    if (rate == 0 || rate > afSamplingRate * 2) {
-#endif
         return BAD_VALUE;
     }
+#else
+    if ((rate <= 0 || rate > afSamplingRate*2)
+#ifdef USE_INTEL_RSP
+    && !iaresamplib_supported_conversion(rate, afSamplingRate)
+#endif
+    ) return BAD_VALUE;
+#endif
 
     AutoMutex lock(mLock);
     mSampleRate = rate;
diff --git a/services/audioflinger/Threads.cpp b/services/audioflinger/Threads.cpp
index 56c4443..bf8160c 100644
--- a/services/audioflinger/Threads.cpp
+++ b/services/audioflinger/Threads.cpp
@@ -1370,16 +1370,16 @@ sp<AudioFlinger::PlaybackThread::Track> AudioFlinger::PlaybackThread::createTrac
                 lStatus = BAD_VALUE;
                 goto Exit;
         }
-        // Resampler implementation limits input sampling rate to 2/4 x output sampling rate.
-#ifdef USE_INTEL_RSP
-        //check if Intel SRC support this conversion
-        if (!AudioResamplerIA::sampleRateSupported(sampleRate, mSampleRate)) {
-#else
 #ifdef QTI_RESAMPLER
         if (sampleRate > mSampleRate * 4) {
 #else
-        if (sampleRate > mSampleRate * 2) {
+       // Resampler implementation limits input sampling rate to 2 x output sampling rate.
+       if ((sampleRate > mSampleRate*2)
+#ifdef USE_INTEL_RSP
+       //check if Intel SRC support this conversion
+       && (!AudioResamplerIA::sampleRateSupported(sampleRate, mSampleRate))
 #endif
+        ) {
 #endif
             ALOGE("Sample rate out of range: %u mSampleRate %u", sampleRate, mSampleRate);
             lStatus = BAD_VALUE;

-- 
1.7.4.1

