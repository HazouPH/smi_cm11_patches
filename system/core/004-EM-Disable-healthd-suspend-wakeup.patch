From 16f4440c2bd519894a0ceb6a77004e483cddbe28 Mon Sep 17 00:00:00 2001
From: Pavan Kumar S <pavan.kumar.s@intel.com>
Date: Tue, 10 Dec 2013 17:01:08 +0530
Subject: [PATCH] EM: Disable healthd suspend wakeup

healthd introduced in KK has a mechanism to block suspend (like a wakelock),
while epoll events are pending. This is blocking S3.

EPOLLWAKEUP flag prevents suspend while epoll events are ready.
Since, healthd has uevent based monitoring, and as all the battery/charger related
extreme conditions and event changes are monitored in driver-framework and notified
through uevent, this flag is disabled to allow S3.

Change-Id: I9fd7ade12fed23f35bb5cc577b6c73ae0240fce8
Category: device enablement
Domain: BatteryManagement-Common
Origin: internal
Signed-off-by: Pavan Kumar S <pavan.kumar.s@intel.com>

diff --git a/healthd/healthd.cpp b/healthd/healthd.cpp
index 70ccc35..621b85f 100644
--- a/healthd/healthd.cpp
+++ b/healthd/healthd.cpp
@@ -89,6 +89,7 @@ static BatteryMonitor* gBatteryMonitor;
 
 static bool nosvcmgr;
 static bool nopolling;
+static bool nowakeup;
 
 static void wakealarm_set_interval(int interval) {
     struct itimerspec itval;
@@ -220,7 +221,9 @@ static void healthd_mainloop(void) {
     }
 
     if (uevent_fd >= 0) {
-        ev.events = EPOLLIN | EPOLLWAKEUP;
+        ev.events = EPOLLIN;
+        if (!nowakeup)
+            ev.events |= EPOLLWAKEUP;
         ev.data.ptr = (void *)uevent_event;
         if (epoll_ctl(epollfd, EPOLL_CTL_ADD, uevent_fd, &ev) == -1)
             KLOG_ERROR(LOG_TAG,
@@ -231,7 +234,9 @@ static void healthd_mainloop(void) {
     }
 
     if (wakealarm_fd >= 0) {
-        ev.events = EPOLLIN | EPOLLWAKEUP;
+        ev.events = EPOLLIN;
+        if (!nowakeup)
+            ev.events |= EPOLLWAKEUP;
         ev.data.ptr = (void *)wakealarm_event;
         if (epoll_ctl(epollfd, EPOLL_CTL_ADD, wakealarm_fd, &ev) == -1)
             KLOG_ERROR(LOG_TAG,
@@ -242,7 +247,9 @@ static void healthd_mainloop(void) {
    }
 
     if (binder_fd >= 0) {
-        ev.events = EPOLLIN | EPOLLWAKEUP;
+        ev.events = EPOLLIN;
+        if (!nowakeup)
+            ev.events |= EPOLLWAKEUP;
         ev.data.ptr= (void *)binder_event;
         if (epoll_ctl(epollfd, EPOLL_CTL_ADD, binder_fd, &ev) == -1)
             KLOG_ERROR(LOG_TAG,
@@ -283,7 +290,7 @@ int main(int argc, char **argv) {
 
     klog_set_level(KLOG_LEVEL);
 
-    while ((ch = getopt(argc, argv, "np")) != -1) {
+    while ((ch = getopt(argc, argv, "npw")) != -1) {
         switch (ch) {
         case 'n':
             nosvcmgr = true;
@@ -291,6 +298,9 @@ int main(int argc, char **argv) {
         case 'p':
             nopolling = true;
             break;
+        case 'w':
+            nowakeup = true;
+            break;
         case '?':
         default:
             KLOG_WARNING(LOG_TAG, "Unrecognized healthd option: %c\n", ch);
-- 
2.5.0

