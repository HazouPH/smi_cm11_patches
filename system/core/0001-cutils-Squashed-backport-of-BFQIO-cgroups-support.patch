From ec9117709a5befd17334481b12b99e779abacf4b Mon Sep 17 00:00:00 2001
From: Steve Kondik <steve@cyngn.com>
Date: Tue, 8 Sep 2015 02:23:41 -0700
Subject: [PATCH 1/9] cutils: Squashed backport of BFQIO cgroups support

cutils: Add support for BFQIO cgroups

 * Add support for a custom hierarchy of cgroups on top of the BFQ
   IO scheduler. This allows us to place every thread into the
   right class (realtime/best-effort/idle) with a set up priority
   buckets depending on use case.
 * The benefit of doing this is pretty incredible from an
   interactivity standpoint. Realtime users (display/audio) benefit
   the most, resulting in glitch-free audio and jank-free video.
   Dexopting in the background no longer causes active harm to
   foreground tasks. Other tasks such as account syncing become
   invisible from the user's perspective.
 * Magic bullet? Perhaps.

Change-Id: I4eb911395364ce46d6dcbff43e94286ded03a97d

cutils: Fix copypasta in ioprio code

Change-Id: I976693be4a6913ed2090fa32d0f8e4c93657e7e7

cutils: Fix display ioprio

 * A few unwanted items are sneaking into this class resulting in
   system slowdowns. Fixit.

Change-Id: I29033a38adf2c65535f916135d395d5147afe323

cutils: Clean up ioprio grouping

 * It's now better understood what's happening system-wide due to these
   changes, so clean up the stuff which is not necessary and/or
   potentially harmful.

Change-Id: I72178770844c1ac388a0b424b12cdc49042aec87

cutils: Remove ioprio magic

 * ..and replace it with something we can call explictly where it is
   required in order to achieve the same goodness without the badness.

Change-Id: I605b3acbc56ce82663dd6f1c9f3320d0ab75e178
---
 include/cutils/iosched_policy.h |  2 +
 libcutils/iosched_policy.c      | 94 ++++++++++++++++++++++++++++++++++++++---
 2 files changed, 89 insertions(+), 7 deletions(-)

diff --git a/include/cutils/iosched_policy.h b/include/cutils/iosched_policy.h
index 07c5d1f..25b87ba 100644
--- a/include/cutils/iosched_policy.h
+++ b/include/cutils/iosched_policy.h
@@ -31,6 +31,8 @@ typedef enum {
 extern int android_set_ioprio(int pid, IoSchedClass clazz, int ioprio);
 extern int android_get_ioprio(int pid, IoSchedClass *clazz, int *ioprio);
 
+extern int android_set_rt_ioprio(int pid, int rt);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/libcutils/iosched_policy.c b/libcutils/iosched_policy.c
index f350f58..4819b5e 100644
--- a/libcutils/iosched_policy.c
+++ b/libcutils/iosched_policy.c
@@ -2,10 +2,11 @@
 /* libs/cutils/iosched_policy.c
 **
 ** Copyright 2007, The Android Open Source Project
+** Copyright 2015, The CyanogenMod Project
 **
-** Licensed under the Apache License, Version 2.0 (the "License"); 
-** you may not use this file except in compliance with the License. 
-** You may obtain a copy of the License at 
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
 **
 **     http://www.apache.org/licenses/LICENSE-2.0 
 **
@@ -27,6 +28,11 @@
 
 #include <cutils/iosched_policy.h>
 
+#ifdef HAVE_ANDROID_OS
+#define LOG_TAG "iosched_policy"
+#include <cutils/log.h>
+#include <sys/stat.h>
+
 extern int ioprio_set(int which, int who, int ioprio);
 
 enum {
@@ -38,17 +44,17 @@ enum {
 #define CLASS_SHIFT 13
 #define IOPRIO_NORM 4
 
+static int __rtio_cgroup_supported = -1;
+static pthread_once_t __rtio_init_once = PTHREAD_ONCE_INIT;
+
 int android_set_ioprio(int pid, IoSchedClass clazz, int ioprio) {
-#ifdef HAVE_ANDROID_OS
     if (ioprio_set(WHO_PROCESS, pid, ioprio | (clazz << CLASS_SHIFT))) {
         return -1;
     }
-#endif
     return 0;
 }
 
 int android_get_ioprio(int pid, IoSchedClass *clazz, int *ioprio) {
-#ifdef HAVE_ANDROID_OS
     int rc;
 
     if ((rc = ioprio_get(WHO_PROCESS, pid)) < 0) {
@@ -57,11 +63,85 @@ int android_get_ioprio(int pid, IoSchedClass *clazz, int *ioprio) {
 
     *clazz = (rc >> CLASS_SHIFT);
     *ioprio = (rc & 0xff);
+    return 0;
+}
+
+static void __initialize_rtio(void) {
+    if (!access("/sys/fs/cgroup/bfqio/tasks", W_OK) ||
+        !access("/sys/fs/cgroup/bfqio/rt-display/tasks", W_OK)) {
+        __rtio_cgroup_supported = 1;
+    } else {
+        __rtio_cgroup_supported = 0;
+    }
+}
+
+int android_set_rt_ioprio(int tid, int rt) {
+    int fd = -1, rc = -1;
+
+    pthread_once(&__rtio_init_once, __initialize_rtio);
+    if (__rtio_cgroup_supported != 1) {
+        return -1;
+    }
+
+    if (rt) {
+        fd = open("/sys/fs/cgroup/bfqio/rt-display/tasks", O_WRONLY | O_CLOEXEC);
+    } else {
+        fd = open("/sys/fs/cgroup/bfqio/tasks", O_WRONLY | O_CLOEXEC);
+    }
+
+    if (fd < 0) {
+        return -1;
+    }
+
+#ifdef HAVE_GETTID
+    if (tid == 0) {
+        tid = gettid();
+    }
+#endif
+
+    if (tid < 200)
+        return -1;
+
+    // specialized itoa -- works for tid > 0
+    char text[22];
+    char *end = text + sizeof(text) - 1;
+    char *ptr = end;
+    *ptr = '\0';
+    while (tid > 0) {
+        *--ptr = '0' + (tid % 10);
+        tid = tid / 10;
+    }
+
+    if (write(fd, ptr, end - ptr) < 0) {
+        /*
+         * If the thread is in the process of exiting,
+         * don't flag an error
+         */
+        if (errno == ESRCH)
+            return 0;
+        SLOGV("android_set_bfqio_prio failed to write '%s' (%s); fd=%d\n",
+              ptr, strerror(errno), fd);
+        return -1;
+    }
+
+    return 0;
+}
+
 #else
+int android_set_ioprio(int pid, IoSchedClass clazz, int ioprio) {
+    return 0;
+}
+
+int android_get_ioprio(int pid, IoSchedClass *clazz, int *ioprio) {
     *clazz = IoSchedClass_NONE;
     *ioprio = 0;
-#endif
     return 0;
 }
 
+int android_set_rt_ioprio(int tid, int rt)
+{
+    return 0;
+}
+#endif
+
 #endif /* HAVE_SCHED_H */
-- 
2.7.4

