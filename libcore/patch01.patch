diff --git a/NativeCode.mk b/NativeCode.mk
index 1a47ee4..2075b65 100644
--- a/NativeCode.mk
+++ b/NativeCode.mk
@@ -87,6 +87,12 @@ LOCAL_MODULE_TAGS := optional
 LOCAL_MODULE := libjavacore
 LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/NativeCode.mk
 include external/stlport/libstlport.mk
+
+ifeq ($(INTEL_HOUDINI), true)
+    LOCAL_CPPFLAGS += -DWITH_HOUDINI
+    LOCAL_STATIC_LIBRARIES += houdini_hook
+endif
+
 include $(BUILD_SHARED_LIBRARY)
 
 # Platform conscrypt crypto library
diff --git a/luni/src/main/java/java/lang/System.java b/luni/src/main/java/java/lang/System.java
index 68ca506..ca2cfed 100644
--- a/luni/src/main/java/java/lang/System.java
+++ b/luni/src/main/java/java/lang/System.java
@@ -56,6 +56,10 @@ import libcore.io.Libcore;
 import libcore.io.StructPasswd;
 import libcore.io.StructUtsname;
 import libcore.util.ZoneInfoDB;
+import java.io.File;
+import java.io.FileInputStream;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
 
 /**
  * Provides access to system-related information and resources including
@@ -418,10 +422,59 @@ public final class System {
      */
     public static String getProperty(String name, String defaultValue) {
         checkPropertyName(name);
+	//String PNAME = Package.getName();
+	if(name == "os.arch"){
+	    int uid = Libcore.os.getuid();
+	    File file = new File("/data/data/.appwithABI2");
+	    FileInputStream fis = null;
+	    byte[] bs = new byte[2];
+	    try {
+		fis = new FileInputStream(file);
+		int content;
+		while ((content = fis.read(bs, 0, 2)) != -1) {
+                    ByteBuffer bb = ByteBuffer.wrap(bs);
+                    bb.order( ByteOrder.LITTLE_ENDIAN);
+                    while( bb.hasRemaining()) {
+			short v = bb.getShort();
+			int myint = (int) (v);
+			if (myint == uid) {
+			    out.println("Fool APP UID (i.w.houdini) with arch 'ARM': " + Integer.toString(uid));
+			    return getPropertiesArch().getProperty(name, defaultValue);
+			}
+                    }
+		}
+	    } catch (IOException e) {
+		e.printStackTrace();
+	    } finally {
+		try {
+		    if (fis != null)
+			fis.close();
+		    } catch (IOException ex) {
+			ex.printStackTrace();
+		    }
+		}
+	    }
         return getProperties().getProperty(name, defaultValue);
     }
 
     /**
+     * Returns the value of os.arch system property. The {@code
+     * defaultValue} will be returned if no such property has been found.
+     */
+    private static Properties systemPropertiesArch;
+    public static Properties getPropertiesArch() {
+	if (systemPropertiesArch == null) {
+	    initSystemPropertiesArch();
+	}
+	return systemPropertiesArch;
+    }
+    private static void initSystemPropertiesArch() {
+	Properties p = new Properties();
+        p.put("os.arch", "arm");
+	systemPropertiesArch = p;
+    }
+
+    /**
      * Sets the value of a particular system property.
      *
      * @return the old value of the property or {@code null} if the property
diff --git a/luni/src/main/native/libcore_io_Posix.cpp b/luni/src/main/native/libcore_io_Posix.cpp
index cf1b714..f374cf0 100644
--- a/luni/src/main/native/libcore_io_Posix.cpp
+++ b/luni/src/main/native/libcore_io_Posix.cpp
@@ -937,12 +937,20 @@ static void Posix_munmap(JNIEnv* env, jobject, jlong address, jlong byteCount) {
     throwIfMinusOne(env, "munmap", TEMP_FAILURE_RETRY(munmap(ptr, byteCount)));
 }
 
+#ifdef WITH_HOUDINI
+extern "C" int houdini_hook_open(const char *path, int flags, int mode);
+#endif
+
 static jobject Posix_open(JNIEnv* env, jobject, jstring javaPath, jint flags, jint mode) {
     ScopedUtfChars path(env, javaPath);
     if (path.c_str() == NULL) {
         return NULL;
     }
+#ifdef WITH_HOUDINI
+    int fd = throwIfMinusOne(env, "open", houdini_hook_open(path.c_str(), flags, mode));
+#else
     int fd = throwIfMinusOne(env, "open", TEMP_FAILURE_RETRY(open(path.c_str(), flags, mode)));
+#endif
     return fd != -1 ? jniCreateFileDescriptor(env, fd) : NULL;
 }
 
