diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
index 0376931..37fe5b9 100644
--- a/res/values/cm_strings.xml
+++ b/res/values/cm_strings.xml
@@ -942,6 +942,8 @@ two in order to insert additional control points. \'Remove\' deletes the selecte
     <string name="camera_wake_summary">Pressing the camera button will wake your device</string>
     <string name="camera_sleep_on_release_title">Screen peek</string>
     <string name="camera_sleep_on_release_summary">A half press will keep the screen on only while the button is held down</string>
+    <string name="camera_launch_on_hold_title">Launch Camera</string>
+    <string name="camera_launch_on_hold_summary">A longpress and release will launch in secure camera</string>
     <string name="camera_music_controls_title">Playback control</string>
     <string name="camera_music_controls_summary">When the screen is off, long pressing the camera key will play/pause current music track</string>
     <string name="volume_wake_summary">Pressing either volume button will wake your device</string>
diff --git a/res/xml/button_settings.xml b/res/xml/button_settings.xml
index 3a4c633..81168c9 100644
--- a/res/xml/button_settings.xml
+++ b/res/xml/button_settings.xml
@@ -204,7 +204,15 @@
             android:summary="@string/camera_sleep_on_release_summary"
             android:defaultValue="false" />
 
-        <com.android.settings.cyanogenmod.SystemSettingCheckBoxPreference
+       
+<com.android.settings.cyanogenmod.SystemSettingCheckBoxPreference
+            android:key="camera_launch_on_hold"
+            android:title="@string/camera_launch_on_hold_title"
+            android:summary="@string/camera_launch_on_hold_summary"
+            android:defaultValue="false" />
+
+        
+<com.android.settings.cyanogenmod.SystemSettingCheckBoxPreference
             android:key="camera_music_controls"
             android:title="@string/camera_music_controls_title"
             android:summary="@string/camera_music_controls_summary"
diff --git a/src/com/android/settings/DeviceInfoSettings.java b/src/com/android/settings/DeviceInfoSettings.java
index 9e82abf..7ed2ddf 100644
--- a/src/com/android/settings/DeviceInfoSettings.java
+++ b/src/com/android/settings/DeviceInfoSettings.java
@@ -128,8 +128,21 @@ public class DeviceInfoSettings extends RestrictedSettingsFragment {
         removePreferenceIfPropertyMissing(getPreferenceScreen(), KEY_SELINUX_STATUS,
                 PROPERTY_SELINUX_STATUS);
 
-        final String cpuInfo = getCPUInfo();
-        String memInfo = getMemInfo();
+        String cpuInfo = null;
+		try{
+			cpuInfo = getCPUInfo();
+		}catch (IOException ie){
+			//error getting cpuInfo
+			 Log.e(LOG_TAG, "Error getting cpuInfo IOException on method getCPUInfo()");
+		}
+        String memInfo = null;
+
+		try{
+			memInfo = getMemInfo();
+		}catch (IOException ie){
+			//error getting memInfo
+			Log.e(LOG_TAG, "Error getting memInfo IOException on method getMemInfo()");
+		}
 
         // Only the owner should see the Updater settings, if it exists
         if (UserHandle.myUserId() == UserHandle.USER_OWNER) {
@@ -407,64 +420,44 @@ public class DeviceInfoSettings extends RestrictedSettingsFragment {
         return "";
     }
 
-    private String getMemInfo() {
+    private String getMemInfo() throws IOException {
         String result = null;
         BufferedReader reader = null;
 
-        try {
-            /* /proc/meminfo entries follow this format:
-             * MemTotal:         362096 kB
-             * MemFree:           29144 kB
-             * Buffers:            5236 kB
-             * Cached:            81652 kB
-             */
-            String firstLine = readLine(FILENAME_PROC_MEMINFO);
-            if (firstLine != null) {
-                String parts[] = firstLine.split("\\s+");
-                if (parts.length == 3) {
-                    result = Long.parseLong(parts[1])/1024 + " MB";
-                }
+        /* /proc/meminfo entries follow this format:
+         * MemTotal:         362096 kB
+         * MemFree:           29144 kB
+         * Buffers:            5236 kB
+         * Cached:            81652 kB
+         */
+        String firstLine = readLine(FILENAME_PROC_MEMINFO);
+        if (firstLine != null) {
+            String parts[] = firstLine.split("\\s+");
+            if (parts.length == 3) {
+                result = Long.parseLong(parts[1])/1024 + " MB";
             }
-        } catch (IOException e) {}
+	}
 
         return result;
     }
 
-    private String getCPUInfo() {
+	private String getCPUInfo() throws IOException {
         String result = null;
         int coreCount = 0;
+	BufferedReader reader = new BufferedReader(new FileReader(FILENAME_PROC_CPUINFO), 256);
 
         try {
-            /* The expected /proc/cpuinfo output is as follows:
-             * Processor	: ARMv7 Processor rev 2 (v7l)
-             * BogoMIPS	: 272.62
-             *
-             * On kernel 3.10 this changed, it is now the last
-             * line. So let's read the whole thing, search
-             * specifically for "Processor", and retain the old
-             * "first line" as fallback.
-             * Also, use "processor : <id>" to count cores
-             */
-            BufferedReader ci = new BufferedReader(new FileReader(FILENAME_PROC_CPUINFO));
-            String firstLine = ci.readLine();
-            String latestLine = firstLine;
-            while (latestLine != null) {
-                if (latestLine.startsWith("Processor"))
-                  result = latestLine.split(":")[1].trim();
-                if (latestLine.startsWith("processor"))
-                  coreCount++;
-                latestLine = ci.readLine();
-            }
-            if (result == null && firstLine != null) {
-                result = firstLine.split(":")[1].trim();
-            }
-            /* Don't do this. hotplug throws off the count
-            if (coreCount > 1) {
-                result = result + " (x" + coreCount + ")";
-            }
-            */
-            ci.close();
-        } catch (IOException e) {}
+            String cpuInfo = null;
+			boolean found = false;
+			while ((cpuInfo = reader.readLine()) != null && !found) {
+				if (cpuInfo.split(":")[0].trim().equals("model name")) {
+					result = cpuInfo.split(":")[1].trim();
+					found = true;
+				}
+			}
+        } finally {
+            reader.close();
+        }
 
         return result;
     }
diff --git a/src/com/android/settings/Utils.java b/src/com/android/settings/Utils.java
index ce37776..2168ad7 100644
--- a/src/com/android/settings/Utils.java
+++ b/src/com/android/settings/Utils.java
@@ -800,4 +800,17 @@ public class Utils {
 
         return null;
     }
+
+    public static boolean checkApkExist(Context context, String packageName) {
+        if (packageName == null || "".equals(packageName))
+                return false;
+        try {
+                ApplicationInfo info = context.getPackageManager()
+                                .getApplicationInfo(packageName,
+                                 PackageManager.GET_UNINSTALLED_PACKAGES);
+                return true;
+        } catch (NameNotFoundException e) {
+                return false;
+        }
+    }    
 }
diff --git a/src/com/android/settings/cyanogenmod/ButtonSettings.java b/src/com/android/settings/cyanogenmod/ButtonSettings.java
index f689acd..2279ec0 100644
--- a/src/com/android/settings/cyanogenmod/ButtonSettings.java
+++ b/src/com/android/settings/cyanogenmod/ButtonSettings.java
@@ -114,6 +114,7 @@ public class ButtonSettings extends SettingsPreferenceFragment implements
     private ListPreference mAppSwitchLongPressAction;
     private CheckBoxPreference mCameraWake;
     private CheckBoxPreference mCameraSleepOnRelease;
+    private CheckBoxPreference mCameraLaunchOnHold;
     private CheckBoxPreference mCameraMusicControls;
     private ListPreference mVolumeKeyCursorControl;
     private CheckBoxPreference mSwapVolumeButtons;
@@ -298,11 +299,14 @@ public class ButtonSettings extends SettingsPreferenceFragment implements
                 prefScreen.findPreference(Settings.System.CAMERA_WAKE_SCREEN);
             mCameraSleepOnRelease = (CheckBoxPreference)
                 prefScreen.findPreference(Settings.System.CAMERA_SLEEP_ON_RELEASE);
+            mCameraLaunchOnHold = (CheckBoxPreference)
+                prefScreen.findPreference(Settings.System.CAMERA_LAUNCH_ON_HOLD);
             mCameraMusicControls = (CheckBoxPreference)
                 prefScreen.findPreference(Settings.System.CAMERA_MUSIC_CONTROLS);
             boolean value = mCameraWake.isChecked();
             mCameraMusicControls.setEnabled(!value);
             mCameraSleepOnRelease.setEnabled(value);
+            mCameraLaunchOnHold.setEnabled(value);
             if (getResources().getBoolean(
                 com.android.internal.R.bool.config_singleStageCameraKey)) {
                 cameraCategory.removePreference(mCameraSleepOnRelease);
@@ -615,6 +619,7 @@ public class ButtonSettings extends SettingsPreferenceFragment implements
             boolean isCameraWakeEnabled = mCameraWake.isChecked();
             mCameraMusicControls.setEnabled(!isCameraWakeEnabled);
             mCameraSleepOnRelease.setEnabled(isCameraWakeEnabled);
+            mCameraLaunchOnHold.setEnabled(isCameraWakeEnabled);
             return true;
         } else if (preference == mDisableNavigationKeys) {
             mDisableNavigationKeys.setEnabled(false);
