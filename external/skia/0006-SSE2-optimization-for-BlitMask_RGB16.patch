From 8642609b6b23e047e8418423d8169bfc52c9cfd1 Mon Sep 17 00:00:00 2001
From: Lei Li <lei.l.li@intel.com>
Date: Thu, 26 Jul 2012 14:11:19 +0800
Subject: [PATCH 06/17] SSE2 optimization for BlitMask_RGB16

BZ: 22651

The optimization routine is solid_8_pixels. It changes control
dependency to data dependency in order to use SSE optimization.
The performance gain is above 20% for text scenario of BJBenchmark

DO NOT UPSTREAM

Change-Id: Idca4f44665f2e97bdb48d07a121b8564a3057416
Category: aosp improvement
Domain: AOSP.Optimization-Browser
Origin: internal
Upstream-Candidate: no, key fix
Author: Lei Li <lei.l.li@intel.com>
Orig-ABT-Change-Id: I7db648d710c6d70e4816c975f27aa14443b8e646
Signed-off-by: Jin Yang <jin.a.yang@intel.com>
---
 src/core/SkBlitter_RGB16.cpp | 153 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 153 insertions(+)

diff --git a/src/core/SkBlitter_RGB16.cpp b/src/core/SkBlitter_RGB16.cpp
index ff770aa..f1e54ea 100644
--- a/src/core/SkBlitter_RGB16.cpp
+++ b/src/core/SkBlitter_RGB16.cpp
@@ -24,6 +24,10 @@
     #define USE_BLACK_BLITTER
 #endif
 
+#ifdef USE_SSE2
+#include <emmintrin.h>
+#endif
+
 void sk_dither_memset16(uint16_t dst[], uint16_t value, uint16_t other,
                         int count) {
     if (count > 0) {
@@ -347,6 +351,154 @@ void SkRGB16_Opaque_Blitter::blitAntiH(int x, int y,
     }
 }
 
+#ifdef USE_SSE2
+static unsigned int solid_pixels_masks[1024] = {
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFFFF0000,
+  0x00000000, 0x00000000, 0x00000000, 0x0000FFFF, 0x00000000, 0x00000000, 0x00000000, 0xFFFFFFFF,
+  0x00000000, 0x00000000, 0xFFFF0000, 0x00000000, 0x00000000, 0x00000000, 0xFFFF0000, 0xFFFF0000,
+  0x00000000, 0x00000000, 0xFFFF0000, 0x0000FFFF, 0x00000000, 0x00000000, 0xFFFF0000, 0xFFFFFFFF,
+  0x00000000, 0x00000000, 0x0000FFFF, 0x00000000, 0x00000000, 0x00000000, 0x0000FFFF, 0xFFFF0000,
+  0x00000000, 0x00000000, 0x0000FFFF, 0x0000FFFF, 0x00000000, 0x00000000, 0x0000FFFF, 0xFFFFFFFF,
+  0x00000000, 0x00000000, 0xFFFFFFFF, 0x00000000, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFF0000,
+  0x00000000, 0x00000000, 0xFFFFFFFF, 0x0000FFFF, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF,
+  0x00000000, 0xFFFF0000, 0x00000000, 0x00000000, 0x00000000, 0xFFFF0000, 0x00000000, 0xFFFF0000,
+  0x00000000, 0xFFFF0000, 0x00000000, 0x0000FFFF, 0x00000000, 0xFFFF0000, 0x00000000, 0xFFFFFFFF,
+  0x00000000, 0xFFFF0000, 0xFFFF0000, 0x00000000, 0x00000000, 0xFFFF0000, 0xFFFF0000, 0xFFFF0000,
+  0x00000000, 0xFFFF0000, 0xFFFF0000, 0x0000FFFF, 0x00000000, 0xFFFF0000, 0xFFFF0000, 0xFFFFFFFF,
+  0x00000000, 0xFFFF0000, 0x0000FFFF, 0x00000000, 0x00000000, 0xFFFF0000, 0x0000FFFF, 0xFFFF0000,
+  0x00000000, 0xFFFF0000, 0x0000FFFF, 0x0000FFFF, 0x00000000, 0xFFFF0000, 0x0000FFFF, 0xFFFFFFFF,
+  0x00000000, 0xFFFF0000, 0xFFFFFFFF, 0x00000000, 0x00000000, 0xFFFF0000, 0xFFFFFFFF, 0xFFFF0000,
+  0x00000000, 0xFFFF0000, 0xFFFFFFFF, 0x0000FFFF, 0x00000000, 0xFFFF0000, 0xFFFFFFFF, 0xFFFFFFFF,
+  0x00000000, 0x0000FFFF, 0x00000000, 0x00000000, 0x00000000, 0x0000FFFF, 0x00000000, 0xFFFF0000,
+  0x00000000, 0x0000FFFF, 0x00000000, 0x0000FFFF, 0x00000000, 0x0000FFFF, 0x00000000, 0xFFFFFFFF,
+  0x00000000, 0x0000FFFF, 0xFFFF0000, 0x00000000, 0x00000000, 0x0000FFFF, 0xFFFF0000, 0xFFFF0000,
+  0x00000000, 0x0000FFFF, 0xFFFF0000, 0x0000FFFF, 0x00000000, 0x0000FFFF, 0xFFFF0000, 0xFFFFFFFF,
+  0x00000000, 0x0000FFFF, 0x0000FFFF, 0x00000000, 0x00000000, 0x0000FFFF, 0x0000FFFF, 0xFFFF0000,
+  0x00000000, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x00000000, 0x0000FFFF, 0x0000FFFF, 0xFFFFFFFF,
+  0x00000000, 0x0000FFFF, 0xFFFFFFFF, 0x00000000, 0x00000000, 0x0000FFFF, 0xFFFFFFFF, 0xFFFF0000,
+  0x00000000, 0x0000FFFF, 0xFFFFFFFF, 0x0000FFFF, 0x00000000, 0x0000FFFF, 0xFFFFFFFF, 0xFFFFFFFF,
+  0x00000000, 0xFFFFFFFF, 0x00000000, 0x00000000, 0x00000000, 0xFFFFFFFF, 0x00000000, 0xFFFF0000,
+  0x00000000, 0xFFFFFFFF, 0x00000000, 0x0000FFFF, 0x00000000, 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF,
+  0x00000000, 0xFFFFFFFF, 0xFFFF0000, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFF0000, 0xFFFF0000,
+  0x00000000, 0xFFFFFFFF, 0xFFFF0000, 0x0000FFFF, 0x00000000, 0xFFFFFFFF, 0xFFFF0000, 0xFFFFFFFF,
+  0x00000000, 0xFFFFFFFF, 0x0000FFFF, 0x00000000, 0x00000000, 0xFFFFFFFF, 0x0000FFFF, 0xFFFF0000,
+  0x00000000, 0xFFFFFFFF, 0x0000FFFF, 0x0000FFFF, 0x00000000, 0xFFFFFFFF, 0x0000FFFF, 0xFFFFFFFF,
+  0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFF0000,
+  0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0x0000FFFF, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
+  0xFFFF0000, 0x00000000, 0x00000000, 0x00000000, 0xFFFF0000, 0x00000000, 0x00000000, 0xFFFF0000,
+  0xFFFF0000, 0x00000000, 0x00000000, 0x0000FFFF, 0xFFFF0000, 0x00000000, 0x00000000, 0xFFFFFFFF,
+  0xFFFF0000, 0x00000000, 0xFFFF0000, 0x00000000, 0xFFFF0000, 0x00000000, 0xFFFF0000, 0xFFFF0000,
+  0xFFFF0000, 0x00000000, 0xFFFF0000, 0x0000FFFF, 0xFFFF0000, 0x00000000, 0xFFFF0000, 0xFFFFFFFF,
+  0xFFFF0000, 0x00000000, 0x0000FFFF, 0x00000000, 0xFFFF0000, 0x00000000, 0x0000FFFF, 0xFFFF0000,
+  0xFFFF0000, 0x00000000, 0x0000FFFF, 0x0000FFFF, 0xFFFF0000, 0x00000000, 0x0000FFFF, 0xFFFFFFFF,
+  0xFFFF0000, 0x00000000, 0xFFFFFFFF, 0x00000000, 0xFFFF0000, 0x00000000, 0xFFFFFFFF, 0xFFFF0000,
+  0xFFFF0000, 0x00000000, 0xFFFFFFFF, 0x0000FFFF, 0xFFFF0000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF,
+  0xFFFF0000, 0xFFFF0000, 0x00000000, 0x00000000, 0xFFFF0000, 0xFFFF0000, 0x00000000, 0xFFFF0000,
+  0xFFFF0000, 0xFFFF0000, 0x00000000, 0x0000FFFF, 0xFFFF0000, 0xFFFF0000, 0x00000000, 0xFFFFFFFF,
+  0xFFFF0000, 0xFFFF0000, 0xFFFF0000, 0x00000000, 0xFFFF0000, 0xFFFF0000, 0xFFFF0000, 0xFFFF0000,
+  0xFFFF0000, 0xFFFF0000, 0xFFFF0000, 0x0000FFFF, 0xFFFF0000, 0xFFFF0000, 0xFFFF0000, 0xFFFFFFFF,
+  0xFFFF0000, 0xFFFF0000, 0x0000FFFF, 0x00000000, 0xFFFF0000, 0xFFFF0000, 0x0000FFFF, 0xFFFF0000,
+  0xFFFF0000, 0xFFFF0000, 0x0000FFFF, 0x0000FFFF, 0xFFFF0000, 0xFFFF0000, 0x0000FFFF, 0xFFFFFFFF,
+  0xFFFF0000, 0xFFFF0000, 0xFFFFFFFF, 0x00000000, 0xFFFF0000, 0xFFFF0000, 0xFFFFFFFF, 0xFFFF0000,
+  0xFFFF0000, 0xFFFF0000, 0xFFFFFFFF, 0x0000FFFF, 0xFFFF0000, 0xFFFF0000, 0xFFFFFFFF, 0xFFFFFFFF,
+  0xFFFF0000, 0x0000FFFF, 0x00000000, 0x00000000, 0xFFFF0000, 0x0000FFFF, 0x00000000, 0xFFFF0000,
+  0xFFFF0000, 0x0000FFFF, 0x00000000, 0x0000FFFF, 0xFFFF0000, 0x0000FFFF, 0x00000000, 0xFFFFFFFF,
+  0xFFFF0000, 0x0000FFFF, 0xFFFF0000, 0x00000000, 0xFFFF0000, 0x0000FFFF, 0xFFFF0000, 0xFFFF0000,
+  0xFFFF0000, 0x0000FFFF, 0xFFFF0000, 0x0000FFFF, 0xFFFF0000, 0x0000FFFF, 0xFFFF0000, 0xFFFFFFFF,
+  0xFFFF0000, 0x0000FFFF, 0x0000FFFF, 0x00000000, 0xFFFF0000, 0x0000FFFF, 0x0000FFFF, 0xFFFF0000,
+  0xFFFF0000, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0xFFFF0000, 0x0000FFFF, 0x0000FFFF, 0xFFFFFFFF,
+  0xFFFF0000, 0x0000FFFF, 0xFFFFFFFF, 0x00000000, 0xFFFF0000, 0x0000FFFF, 0xFFFFFFFF, 0xFFFF0000,
+  0xFFFF0000, 0x0000FFFF, 0xFFFFFFFF, 0x0000FFFF, 0xFFFF0000, 0x0000FFFF, 0xFFFFFFFF, 0xFFFFFFFF,
+  0xFFFF0000, 0xFFFFFFFF, 0x00000000, 0x00000000, 0xFFFF0000, 0xFFFFFFFF, 0x00000000, 0xFFFF0000,
+  0xFFFF0000, 0xFFFFFFFF, 0x00000000, 0x0000FFFF, 0xFFFF0000, 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF,
+  0xFFFF0000, 0xFFFFFFFF, 0xFFFF0000, 0x00000000, 0xFFFF0000, 0xFFFFFFFF, 0xFFFF0000, 0xFFFF0000,
+  0xFFFF0000, 0xFFFFFFFF, 0xFFFF0000, 0x0000FFFF, 0xFFFF0000, 0xFFFFFFFF, 0xFFFF0000, 0xFFFFFFFF,
+  0xFFFF0000, 0xFFFFFFFF, 0x0000FFFF, 0x00000000, 0xFFFF0000, 0xFFFFFFFF, 0x0000FFFF, 0xFFFF0000,
+  0xFFFF0000, 0xFFFFFFFF, 0x0000FFFF, 0x0000FFFF, 0xFFFF0000, 0xFFFFFFFF, 0x0000FFFF, 0xFFFFFFFF,
+  0xFFFF0000, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0xFFFF0000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFF0000,
+  0xFFFF0000, 0xFFFFFFFF, 0xFFFFFFFF, 0x0000FFFF, 0xFFFF0000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
+  0x0000FFFF, 0x00000000, 0x00000000, 0x00000000, 0x0000FFFF, 0x00000000, 0x00000000, 0xFFFF0000,
+  0x0000FFFF, 0x00000000, 0x00000000, 0x0000FFFF, 0x0000FFFF, 0x00000000, 0x00000000, 0xFFFFFFFF,
+  0x0000FFFF, 0x00000000, 0xFFFF0000, 0x00000000, 0x0000FFFF, 0x00000000, 0xFFFF0000, 0xFFFF0000,
+  0x0000FFFF, 0x00000000, 0xFFFF0000, 0x0000FFFF, 0x0000FFFF, 0x00000000, 0xFFFF0000, 0xFFFFFFFF,
+  0x0000FFFF, 0x00000000, 0x0000FFFF, 0x00000000, 0x0000FFFF, 0x00000000, 0x0000FFFF, 0xFFFF0000,
+  0x0000FFFF, 0x00000000, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x00000000, 0x0000FFFF, 0xFFFFFFFF,
+  0x0000FFFF, 0x00000000, 0xFFFFFFFF, 0x00000000, 0x0000FFFF, 0x00000000, 0xFFFFFFFF, 0xFFFF0000,
+  0x0000FFFF, 0x00000000, 0xFFFFFFFF, 0x0000FFFF, 0x0000FFFF, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF,
+  0x0000FFFF, 0xFFFF0000, 0x00000000, 0x00000000, 0x0000FFFF, 0xFFFF0000, 0x00000000, 0xFFFF0000,
+  0x0000FFFF, 0xFFFF0000, 0x00000000, 0x0000FFFF, 0x0000FFFF, 0xFFFF0000, 0x00000000, 0xFFFFFFFF,
+  0x0000FFFF, 0xFFFF0000, 0xFFFF0000, 0x00000000, 0x0000FFFF, 0xFFFF0000, 0xFFFF0000, 0xFFFF0000,
+  0x0000FFFF, 0xFFFF0000, 0xFFFF0000, 0x0000FFFF, 0x0000FFFF, 0xFFFF0000, 0xFFFF0000, 0xFFFFFFFF,
+  0x0000FFFF, 0xFFFF0000, 0x0000FFFF, 0x00000000, 0x0000FFFF, 0xFFFF0000, 0x0000FFFF, 0xFFFF0000,
+  0x0000FFFF, 0xFFFF0000, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0xFFFF0000, 0x0000FFFF, 0xFFFFFFFF,
+  0x0000FFFF, 0xFFFF0000, 0xFFFFFFFF, 0x00000000, 0x0000FFFF, 0xFFFF0000, 0xFFFFFFFF, 0xFFFF0000,
+  0x0000FFFF, 0xFFFF0000, 0xFFFFFFFF, 0x0000FFFF, 0x0000FFFF, 0xFFFF0000, 0xFFFFFFFF, 0xFFFFFFFF,
+  0x0000FFFF, 0x0000FFFF, 0x00000000, 0x00000000, 0x0000FFFF, 0x0000FFFF, 0x00000000, 0xFFFF0000,
+  0x0000FFFF, 0x0000FFFF, 0x00000000, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x00000000, 0xFFFFFFFF,
+  0x0000FFFF, 0x0000FFFF, 0xFFFF0000, 0x00000000, 0x0000FFFF, 0x0000FFFF, 0xFFFF0000, 0xFFFF0000,
+  0x0000FFFF, 0x0000FFFF, 0xFFFF0000, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0xFFFF0000, 0xFFFFFFFF,
+  0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x00000000, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0xFFFF0000,
+  0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0xFFFFFFFF,
+  0x0000FFFF, 0x0000FFFF, 0xFFFFFFFF, 0x00000000, 0x0000FFFF, 0x0000FFFF, 0xFFFFFFFF, 0xFFFF0000,
+  0x0000FFFF, 0x0000FFFF, 0xFFFFFFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0xFFFFFFFF, 0xFFFFFFFF,
+  0x0000FFFF, 0xFFFFFFFF, 0x00000000, 0x00000000, 0x0000FFFF, 0xFFFFFFFF, 0x00000000, 0xFFFF0000,
+  0x0000FFFF, 0xFFFFFFFF, 0x00000000, 0x0000FFFF, 0x0000FFFF, 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF,
+  0x0000FFFF, 0xFFFFFFFF, 0xFFFF0000, 0x00000000, 0x0000FFFF, 0xFFFFFFFF, 0xFFFF0000, 0xFFFF0000,
+  0x0000FFFF, 0xFFFFFFFF, 0xFFFF0000, 0x0000FFFF, 0x0000FFFF, 0xFFFFFFFF, 0xFFFF0000, 0xFFFFFFFF,
+  0x0000FFFF, 0xFFFFFFFF, 0x0000FFFF, 0x00000000, 0x0000FFFF, 0xFFFFFFFF, 0x0000FFFF, 0xFFFF0000,
+  0x0000FFFF, 0xFFFFFFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0xFFFFFFFF, 0x0000FFFF, 0xFFFFFFFF,
+  0x0000FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x0000FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFF0000,
+  0x0000FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x0000FFFF, 0x0000FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
+  0xFFFFFFFF, 0x00000000, 0x00000000, 0x00000000, 0xFFFFFFFF, 0x00000000, 0x00000000, 0xFFFF0000,
+  0xFFFFFFFF, 0x00000000, 0x00000000, 0x0000FFFF, 0xFFFFFFFF, 0x00000000, 0x00000000, 0xFFFFFFFF,
+  0xFFFFFFFF, 0x00000000, 0xFFFF0000, 0x00000000, 0xFFFFFFFF, 0x00000000, 0xFFFF0000, 0xFFFF0000,
+  0xFFFFFFFF, 0x00000000, 0xFFFF0000, 0x0000FFFF, 0xFFFFFFFF, 0x00000000, 0xFFFF0000, 0xFFFFFFFF,
+  0xFFFFFFFF, 0x00000000, 0x0000FFFF, 0x00000000, 0xFFFFFFFF, 0x00000000, 0x0000FFFF, 0xFFFF0000,
+  0xFFFFFFFF, 0x00000000, 0x0000FFFF, 0x0000FFFF, 0xFFFFFFFF, 0x00000000, 0x0000FFFF, 0xFFFFFFFF,
+  0xFFFFFFFF, 0x00000000, 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF, 0xFFFF0000,
+  0xFFFFFFFF, 0x00000000, 0xFFFFFFFF, 0x0000FFFF, 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF,
+  0xFFFFFFFF, 0xFFFF0000, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFF0000, 0x00000000, 0xFFFF0000,
+  0xFFFFFFFF, 0xFFFF0000, 0x00000000, 0x0000FFFF, 0xFFFFFFFF, 0xFFFF0000, 0x00000000, 0xFFFFFFFF,
+  0xFFFFFFFF, 0xFFFF0000, 0xFFFF0000, 0x00000000, 0xFFFFFFFF, 0xFFFF0000, 0xFFFF0000, 0xFFFF0000,
+  0xFFFFFFFF, 0xFFFF0000, 0xFFFF0000, 0x0000FFFF, 0xFFFFFFFF, 0xFFFF0000, 0xFFFF0000, 0xFFFFFFFF,
+  0xFFFFFFFF, 0xFFFF0000, 0x0000FFFF, 0x00000000, 0xFFFFFFFF, 0xFFFF0000, 0x0000FFFF, 0xFFFF0000,
+  0xFFFFFFFF, 0xFFFF0000, 0x0000FFFF, 0x0000FFFF, 0xFFFFFFFF, 0xFFFF0000, 0x0000FFFF, 0xFFFFFFFF,
+  0xFFFFFFFF, 0xFFFF0000, 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF, 0xFFFF0000, 0xFFFFFFFF, 0xFFFF0000,
+  0xFFFFFFFF, 0xFFFF0000, 0xFFFFFFFF, 0x0000FFFF, 0xFFFFFFFF, 0xFFFF0000, 0xFFFFFFFF, 0xFFFFFFFF,
+  0xFFFFFFFF, 0x0000FFFF, 0x00000000, 0x00000000, 0xFFFFFFFF, 0x0000FFFF, 0x00000000, 0xFFFF0000,
+  0xFFFFFFFF, 0x0000FFFF, 0x00000000, 0x0000FFFF, 0xFFFFFFFF, 0x0000FFFF, 0x00000000, 0xFFFFFFFF,
+  0xFFFFFFFF, 0x0000FFFF, 0xFFFF0000, 0x00000000, 0xFFFFFFFF, 0x0000FFFF, 0xFFFF0000, 0xFFFF0000,
+  0xFFFFFFFF, 0x0000FFFF, 0xFFFF0000, 0x0000FFFF, 0xFFFFFFFF, 0x0000FFFF, 0xFFFF0000, 0xFFFFFFFF,
+  0xFFFFFFFF, 0x0000FFFF, 0x0000FFFF, 0x00000000, 0xFFFFFFFF, 0x0000FFFF, 0x0000FFFF, 0xFFFF0000,
+  0xFFFFFFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0xFFFFFFFF, 0x0000FFFF, 0x0000FFFF, 0xFFFFFFFF,
+  0xFFFFFFFF, 0x0000FFFF, 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF, 0x0000FFFF, 0xFFFFFFFF, 0xFFFF0000,
+  0xFFFFFFFF, 0x0000FFFF, 0xFFFFFFFF, 0x0000FFFF, 0xFFFFFFFF, 0x0000FFFF, 0xFFFFFFFF, 0xFFFFFFFF,
+  0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0xFFFF0000,
+  0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x0000FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF,
+  0xFFFFFFFF, 0xFFFFFFFF, 0xFFFF0000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFF0000, 0xFFFF0000,
+  0xFFFFFFFF, 0xFFFFFFFF, 0xFFFF0000, 0x0000FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFF0000, 0xFFFFFFFF,
+  0xFFFFFFFF, 0xFFFFFFFF, 0x0000FFFF, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0x0000FFFF, 0xFFFF0000,
+  0xFFFFFFFF, 0xFFFFFFFF, 0x0000FFFF, 0x0000FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x0000FFFF, 0xFFFFFFFF,
+  0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFF0000,
+  0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x0000FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
+};
+
+// _mm_maskmoveu_si128(_mcolor, _mtemp, (char*)dst);
+#define solid_8_pixels(mask, dst, color)    \
+    do {                                     \
+        if (mask != 0)  {                         \
+            __m128i _mtemp  = _mm_load_si128((__m128i*)(solid_pixels_masks + (mask << 2))); \
+            __m128i _mcolor = _mm_set1_epi16((short)color);      \
+            __m128i _mvalue = _mm_loadu_si128((__m128i*)dst);    \
+            _mvalue = _mm_or_si128(_mvalue, _mtemp);    \
+            _mvalue = _mm_and_si128(_mvalue, _mm_or_si128(_mcolor, \
+            _mm_xor_si128(_mtemp, _mm_cmpeq_epi32(_mtemp, _mtemp)))); \
+            _mm_storeu_si128((__m128i *)dst, _mvalue);    \
+        }    \
+    } while (0)
+
+#else
+
 #define solid_8_pixels(mask, dst, color)    \
     do {                                    \
         if (mask & 0x80) dst[0] = color;    \
@@ -358,6 +510,7 @@ void SkRGB16_Opaque_Blitter::blitAntiH(int x, int y,
         if (mask & 0x02) dst[6] = color;    \
         if (mask & 0x01) dst[7] = color;    \
     } while (0)
+#endif // #ifdef USE_SSE2
 
 #define SK_BLITBWMASK_NAME                  SkRGB16_BlitBW
 #define SK_BLITBWMASK_ARGS                  , uint16_t color
-- 
2.7.4

