From 68f3936b04a34a86062f2b77f11007d4ee411071 Mon Sep 17 00:00:00 2001
From: Steve Kondik <steve@cyngn.com>
Date: Fri, 12 Dec 2014 22:24:13 -0800
Subject: [PATCH] stagefright-plugins: Updates for FFMPEG 2.5

 * Update for API changes in FFMPEG 2.5
 * Clean up all the warnings
 * Remove homegrown timestamp handling, it's no longer needed
 * FFMPEG software video decoders perform quite well-
   We now have a formidable media stack that can play nearly
   anything!

Change-Id: I910e24a60f29968894b62d13b16c6b5c9b3b42a6
---
 libstagefright/FFmpegExtractor/FFmpegExtractor.cpp | 15 ++--
 .../codecs/ffmpegdec/adec/SoftFFmpegAudio.cpp      |  3 +-
 .../codecs/ffmpegdec/vdec/SoftFFmpegVideo.cpp      | 84 ++--------------------
 .../codecs/ffmpegdec/vdec/SoftFFmpegVideo.h        |  1 -
 utils/codec_utils.cpp                              | 16 ++---
 utils/ffmpeg_cmdutils.c                            |  4 +-
 utils/ffmpeg_source.cpp                            |  6 +-
 utils/ffmpeg_utils.cpp                             | 14 ++--
 8 files changed, 32 insertions(+), 111 deletions(-)

diff --git a/libstagefright/FFmpegExtractor/FFmpegExtractor.cpp b/libstagefright/FFmpegExtractor/FFmpegExtractor.cpp
index 5305039..75489f8 100644
--- a/libstagefright/FFmpegExtractor/FFmpegExtractor.cpp
+++ b/libstagefright/FFmpegExtractor/FFmpegExtractor.cpp
@@ -165,7 +165,7 @@ sp<MediaSource> FFmpegExtractor::getTrack(size_t index) {
     return new FFmpegSource(this, index);
 }
 
-sp<MetaData> FFmpegExtractor::getTrackMetaData(size_t index, uint32_t flags) {
+sp<MetaData> FFmpegExtractor::getTrackMetaData(size_t index, uint32_t flags __unused) {
     ALOGV("FFmpegExtractor::getTrackMetaData[%d]", index);
 
     if (mInitCheck != OK) {
@@ -1105,11 +1105,11 @@ void FFmpegExtractor::readerEntry() {
         ret = av_read_frame(mFormatCtx, pkt);
         mProbePkts++;
         if (ret < 0) {
-            if (ret == AVERROR_EOF || url_feof(mFormatCtx->pb))
+            if (ret == AVERROR_EOF || mFormatCtx->pb->eof_reached)
                 if (ret == AVERROR_EOF) {
                     //ALOGV("ret == AVERROR_EOF");
                 }
-                if (url_feof(mFormatCtx->pb)) {
+                if (mFormatCtx->pb->eof_reached) {
                     //ALOGV("url_feof(mFormatCtx->pb)");
                 }
 
@@ -1264,7 +1264,7 @@ FFmpegSource::~FFmpegSource() {
 	mExtractor = NULL;
 }
 
-status_t FFmpegSource::start(MetaData *params) {
+status_t FFmpegSource::start(MetaData *params __unused) {
     ALOGV("FFmpegSource::start %s",
             av_get_media_type_string(mMediaType));
     return OK;
@@ -1511,8 +1511,6 @@ static bool isCodecSupportedByStagefright(enum AVCodecID codec_id)
     case AV_CODEC_ID_WMV3:
 	//audio
     case AV_CODEC_ID_AAC:
-    case AV_CODEC_ID_AC3:
-    case AV_CODEC_ID_EAC3:
     case AV_CODEC_ID_MP3:
     case AV_CODEC_ID_AMR_NB:
     case AV_CODEC_ID_AMR_WB:
diff --git a/libstagefright/codecs/ffmpegdec/adec/SoftFFmpegAudio.cpp b/libstagefright/codecs/ffmpegdec/adec/SoftFFmpegAudio.cpp
index 3d32df4..d750000 100644
--- a/libstagefright/codecs/ffmpegdec/adec/SoftFFmpegAudio.cpp
+++ b/libstagefright/codecs/ffmpegdec/adec/SoftFFmpegAudio.cpp
@@ -1210,7 +1210,7 @@ int32_t SoftFFmpegAudio::openDecoder() {
             av_get_sample_fmt_name(mCtx->sample_fmt),
             mCtx->bits_per_coded_sample, mCtx->bits_per_raw_sample);
 
-    mFrame = avcodec_alloc_frame();
+    mFrame = av_frame_alloc();
     if (!mFrame) {
         ALOGE("oom for video frame");
         return ERR_OOM;
@@ -1284,7 +1284,6 @@ int32_t SoftFFmpegAudio::decodeAudio() {
     AVPacket pkt;
     initPacket(&pkt, inHeader);
     av_frame_unref(mFrame);
-    avcodec_get_frame_defaults(mFrame);
 
     len = avcodec_decode_audio4(mCtx, mFrame, &gotFrm, &pkt);
     //a negative error code is returned if an error occurred during decoding
diff --git a/libstagefright/codecs/ffmpegdec/vdec/SoftFFmpegVideo.cpp b/libstagefright/codecs/ffmpegdec/vdec/SoftFFmpegVideo.cpp
index 1530d69..dbf8718 100644
--- a/libstagefright/codecs/ffmpegdec/vdec/SoftFFmpegVideo.cpp
+++ b/libstagefright/codecs/ffmpegdec/vdec/SoftFFmpegVideo.cpp
@@ -90,7 +90,6 @@ SoftFFmpegVideo::SoftFFmpegVideo(
       mExtradataReady(false),
       mIgnoreExtradata(false),
       mSignalledError(false),
-      mDoDeinterlace(true),
       mWidth(320),
       mHeight(240),
       mStride(320),
@@ -787,7 +786,7 @@ int32_t SoftFFmpegVideo::openDecoder() {
     ALOGD("open ffmpeg video decoder(%s) success",
             avcodec_get_name(mCtx->codec_id));
 
-    mFrame = avcodec_alloc_frame();
+    mFrame = av_frame_alloc();
     if (!mFrame) {
         ALOGE("oom for video frame");
         return ERR_OOM;
@@ -838,8 +837,7 @@ int32_t SoftFFmpegVideo::decodeVideo() {
 
     AVPacket pkt;
     initPacket(&pkt, inHeader);
-    //av_frame_unref(mFrame); //Don't unref mFrame!!!
-    avcodec_get_frame_defaults(mFrame);
+    av_frame_unref(mFrame);
 
     int err = avcodec_decode_video2(mCtx, mFrame, &gotPic, &pkt);
     if (err < 0) {
@@ -874,62 +872,15 @@ int32_t SoftFFmpegVideo::decodeVideo() {
 	return ret;
 }
 
-int32_t SoftFFmpegVideo::preProcessVideoFrame(AVPicture *picture, void **bufp) {
-    AVPicture *picture2;
-    AVPicture picture_tmp;
-    uint8_t *buf = NULL;
-
-    //deinterlace : must be done before any resize
-    if (mDoDeinterlace) {
-        int size = 0;
-
-        //create temporary picture
-        size = avpicture_get_size(mCtx->pix_fmt, mCtx->width, mCtx->height);
-        buf  = (uint8_t *)av_malloc(size);
-        if (!buf) {
-            ALOGE("oom for temporary picture");
-            return ERR_OOM;
-        }
-
-        picture2 = &picture_tmp;
-        avpicture_fill(picture2, buf, mCtx->pix_fmt, mCtx->width, mCtx->height);
-
-        if (avpicture_deinterlace(picture2, picture,
-                mCtx->pix_fmt, mCtx->width, mCtx->height) < 0) {
-            //if error, do not deinterlace
-            ALOGE("Deinterlacing failed");
-            av_free(buf);
-            buf = NULL;
-            picture2 = picture;
-        }
-    } else {
-        picture2 = picture;
-    }
-
-    if (picture != picture2)
-        *picture = *picture2;
-    *bufp = buf;
-
-    return ERR_OK;
-}
-
 int32_t SoftFFmpegVideo::drainOneOutputBuffer() {
     List<BufferInfo *> &outQueue = getPortQueue(kOutputPortIndex);
     BufferInfo *outInfo = *outQueue.begin();
 	OMX_BUFFERHEADERTYPE *outHeader = outInfo->mHeader;
 
     AVPicture pict;
-    void *buffer_to_free = NULL;
     int64_t pts = AV_NOPTS_VALUE;
     uint8_t *dst = outHeader->pBuffer;
 
-    //do deinterlace if necessary. for example, your TV is progressive
-    int32_t err = preProcessVideoFrame((AVPicture *)mFrame, &buffer_to_free);
-    if (err != ERR_OK) {
-        ALOGE("preProcessVideoFrame failed");
-        return err;
-    }
-
     memset(&pict, 0, sizeof(AVPicture));
     pict.data[0] = dst;
     pict.data[1] = dst + mStride * mHeight;
@@ -941,7 +892,6 @@ int32_t SoftFFmpegVideo::drainOneOutputBuffer() {
            PIX_FMT_YUV420P, sws_flags, NULL, NULL, NULL);
     if (mImgConvertCtx == NULL) {
         ALOGE("Cannot initialize the conversion context");
-        av_free(buffer_to_free);
         return ERR_SWS_FAILED;
     }
     sws_scale(mImgConvertCtx, mFrame->data, mFrame->linesize,
@@ -973,15 +923,14 @@ int32_t SoftFFmpegVideo::drainOneOutputBuffer() {
     outHeader->nTimeStamp = pts; //FIXME pts is right???
 
 #if DEBUG_FRM
-    ALOGV("mFrame pts: %lld", pts);
+    ALOGV("mFrame pkt_pts: %lld pkt_dts: %lld used %lld", mFrame->pkt_pts, mFrame->pkt_dts, pts);
+
 #endif
 
     outQueue.erase(outQueue.begin());
     outInfo->mOwnedByUs = false;
     notifyFillBufferDone(outHeader);
 
-    av_free(buffer_to_free);
-
     return ERR_OK;
 }
 
@@ -1048,7 +997,7 @@ void SoftFFmpegVideo::drainAllOutputBuffers() {
     }
 }
 
-void SoftFFmpegVideo::onQueueFilled(OMX_U32 portIndex) {
+void SoftFFmpegVideo::onQueueFilled(OMX_U32 portIndex __unused) {
     BufferInfo *inInfo = NULL;
     OMX_BUFFERHEADERTYPE *inHeader = NULL;
     List<BufferInfo *> &inQueue = getPortQueue(kInputPortIndex);
diff --git a/libstagefright/codecs/ffmpegdec/vdec/SoftFFmpegVideo.h b/libstagefright/codecs/ffmpegdec/vdec/SoftFFmpegVideo.h
index 6c28769..cb98bf0 100644
--- a/libstagefright/codecs/ffmpegdec/vdec/SoftFFmpegVideo.h
+++ b/libstagefright/codecs/ffmpegdec/vdec/SoftFFmpegVideo.h
@@ -97,7 +97,6 @@ private:
     bool mExtradataReady;
     bool mIgnoreExtradata;
     bool mSignalledError;
-    bool mDoDeinterlace;
     int32_t mWidth, mHeight, mStride;
 
     enum {
diff --git a/utils/codec_utils.cpp b/utils/codec_utils.cpp
index d8b82c1..0538803 100644
--- a/utils/codec_utils.cpp
+++ b/utils/codec_utils.cpp
@@ -154,7 +154,7 @@ sp<MetaData> setMPEG4Format(AVCodecContext *avctx)
     return meta;
 }
 
-sp<MetaData> setH263Format(AVCodecContext *avctx)
+sp<MetaData> setH263Format(AVCodecContext *avctx __unused)
 {
     ALOGV("H263");
 
@@ -190,7 +190,7 @@ sp<MetaData> setVC1Format(AVCodecContext *avctx)
     return meta;
 }
 
-sp<MetaData> setWMV1Format(AVCodecContext *avctx)
+sp<MetaData> setWMV1Format(AVCodecContext *avctx __unused)
 {
     ALOGV("WMV1");
 
@@ -283,7 +283,7 @@ sp<MetaData> setHEVCFormat(AVCodecContext *avctx)
     return meta;
 }
 
-sp<MetaData> setVP8Format(AVCodecContext *avctx)
+sp<MetaData> setVP8Format(AVCodecContext *avctx __unused)
 {
     ALOGV("VP8");
 
@@ -293,7 +293,7 @@ sp<MetaData> setVP8Format(AVCodecContext *avctx)
     return meta;
 }
 
-sp<MetaData> setVP9Format(AVCodecContext *avctx)
+sp<MetaData> setVP9Format(AVCodecContext *avctx __unused)
 {
     ALOGV("VP9");
 
@@ -305,7 +305,7 @@ sp<MetaData> setVP9Format(AVCodecContext *avctx)
 
 //audio
 
-sp<MetaData> setMP2Format(AVCodecContext *avctx)
+sp<MetaData> setMP2Format(AVCodecContext *avctx __unused)
 {
     ALOGV("MP2");
 
@@ -315,7 +315,7 @@ sp<MetaData> setMP2Format(AVCodecContext *avctx)
     return meta;
 }
 
-sp<MetaData> setMP3Format(AVCodecContext *avctx)
+sp<MetaData> setMP3Format(AVCodecContext *avctx __unused)
 {
     ALOGV("MP3");
 
@@ -348,7 +348,7 @@ sp<MetaData> setVORBISFormat(AVCodecContext *avctx)
     return meta;
 }
 
-sp<MetaData> setAC3Format(AVCodecContext *avctx)
+sp<MetaData> setAC3Format(AVCodecContext *avctx __unused)
 {
     ALOGV("AC3");
 
diff --git a/utils/ffmpeg_cmdutils.c b/utils/ffmpeg_cmdutils.c
index 24f7632..291574b 100644
--- a/utils/ffmpeg_cmdutils.c
+++ b/utils/ffmpeg_cmdutils.c
@@ -57,7 +57,7 @@ AVDictionary *filter_codec_opts(AVDictionary *opts, enum AVCodecID codec_id,
         break;
     }
 
-    while (t = av_dict_get(opts, "", t, AV_DICT_IGNORE_SUFFIX)) {
+    while ((t = av_dict_get(opts, "", t, AV_DICT_IGNORE_SUFFIX))) {
         char *p = strchr(t->key, ':');
 
         /* check stream specification in opt name */
@@ -87,7 +87,7 @@ AVDictionary *filter_codec_opts(AVDictionary *opts, enum AVCodecID codec_id,
 AVDictionary **setup_find_stream_info_opts(AVFormatContext *s,
                                            AVDictionary *codec_opts)
 {
-    int i;
+    unsigned int i;
     AVDictionary **opts;
 
     if (!s->nb_streams)
diff --git a/utils/ffmpeg_source.cpp b/utils/ffmpeg_source.cpp
index 942c781..8427d30 100644
--- a/utils/ffmpeg_source.cpp
+++ b/utils/ffmpeg_source.cpp
@@ -106,7 +106,7 @@ off64_t FFSource::getSize()
 
 /////////////////////////////////////////////////////////////////
 
-static int android_open(URLContext *h, const char *url, int flags)
+static int android_open(URLContext *h, const char *url, int flags __unused)
 {
     // the url in form of "android-source:<DataSource Ptr>",
     // the DataSource Pointer passed by the ffmpeg extractor
@@ -162,7 +162,7 @@ static int android_read(URLContext *h, unsigned char *buf, int size)
     return ffs->read(buf, size);
 }
 
-static int android_write(URLContext *h, const unsigned char *buf, int size)
+static int android_write(URLContext *h __unused, const unsigned char *buf __unused, int size __unused)
 {
     return -1;
 }
@@ -216,7 +216,7 @@ void ffmpeg_register_android_source()
     ff_android_protocol.url_get_file_handle = android_get_handle;
     ff_android_protocol.url_check           = android_check;
     
-    ffurl_register_protocol(&ff_android_protocol, sizeof(URLProtocol));
+    ffurl_register_protocol(&ff_android_protocol);
 }
 
 }  // namespace android
diff --git a/utils/ffmpeg_utils.cpp b/utils/ffmpeg_utils.cpp
index 4ba2af7..44c5e63 100644
--- a/utils/ffmpeg_utils.cpp
+++ b/utils/ffmpeg_utils.cpp
@@ -64,12 +64,12 @@ namespace android {
 extern "C" {
 #endif
 
-void exit_program(int ret)
+void exit_program(int ret __unused)
 {
     // do nothing
 }
 
-void show_help_default(const char *opt, const char *arg)
+void show_help_default(const char *opt __unused, const char *arg __unused)
 {
     // do nothing
 }
@@ -231,7 +231,7 @@ status_t initFFmpeg()
 
         /* register all codecs, demux and protocols */
         avcodec_register_all();
-#if CONFIG_AVDEVICE
+#if 0
         avdevice_register_all();
 #endif
         av_register_all();
@@ -273,7 +273,7 @@ void deInitFFmpeg()
 // parser
 //////////////////////////////////////////////////////////////////////////////////
 /* H.264 bitstream with start codes, NOT AVC1! */
-static int h264_split(AVCodecContext *avctx,
+static int h264_split(AVCodecContext *avctx __unused,
 		const uint8_t *buf, int buf_size, int check_compatible_only)
 {
     int i;
@@ -309,8 +309,8 @@ static int h264_split(AVCodecContext *avctx,
     return 0;
 }
 
-static int mpegvideo_split(AVCodecContext *avctx,
-		const uint8_t *buf, int buf_size, int check_compatible_only)
+static int mpegvideo_split(AVCodecContext *avctx __unused,
+		const uint8_t *buf, int buf_size, int check_compatible_only __unused)
 {
     int i;
     uint32_t state= -1;
