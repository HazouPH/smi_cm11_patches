From 0690681c0a6e167f08a9d767675a858076b8b36f Mon Sep 17 00:00:00 2001
From: dvshkurk <Dmitry.V.Shkurko@intel.com>
Date: Tue, 14 Aug 2012 17:06:14 +0700
Subject: [PATCH 2/5] Intel C/C++ compiler support

BZ: 47062

Change-Id: I98386b485e6884df6032ddff11d54180ed663b80
Orig-Change-Id: I6bf614f957f7b93c8c285d4b1b707366d75fe922
Category: device enablement
Domain: AOSP
Origin: internal
Upstream-Candidate: no
Signed-off-by: dvshkurk <Dmitry.V.Shkurko@intel.com>
Reviewed-on: http://android.intel.com:8080/85691
Reviewed-by: Shkurko, Dmitry V <dmitry.v.shkurko@intel.com>
Tested-by: Li, XiaojingX <xiaojingx.li@intel.com>
Reviewed-by: Yao, Yong <yong.yao@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 core/binary.mk                 |  35 ++++++++-
 core/combo/TARGET_linux-x86.mk |   6 +-
 core/config.mk                 |   3 +
 core/icc_config.mk             | 166 +++++++++++++++++++++++++++++++++++++++++
 4 files changed, 208 insertions(+), 2 deletions(-)
 create mode 100644 core/icc_config.mk

diff --git a/core/binary.mk b/core/binary.mk
index 8ce874e..d2b74bc 100644
--- a/core/binary.mk
+++ b/core/binary.mk
@@ -66,6 +66,13 @@ else
   endif
 endif
 
+# Correct icc libraries
+ifeq ($(LOCAL_IS_HOST_MODULE),)
+ifneq ($(strip $(call intel-target-need-intel-libraries)),)
+$(call icc-libs)
+endif
+endif
+
 ifdef LOCAL_SDK_VERSION
   # Get the list of INSTALLED libraries as module names.
   # We cannot compute the full path of the LOCAL_SHARED_LIBRARIES for
@@ -142,6 +149,15 @@ ifeq ($(strip $(LOCAL_ENABLE_APROF)),true)
   LOCAL_CPPFLAGS += -fno-omit-frame-pointer -fno-function-sections -pg
 endif
 
+###################################################
+# Configure flags for ICC
+###################################################
+ifeq ($(LOCAL_IS_HOST_MODULE),)
+ifneq ($(strip $(call intel-target-use-icc,$(LOCAL_MODULE))),)
+$(call icc-flags)
+endif
+endif
+
 ###########################################################
 ## Explicitly declare assembly-only __ASSEMBLY__ macro for
 ## assembly source
@@ -151,6 +167,7 @@ LOCAL_ASFLAGS += -D__ASSEMBLY__
 ###########################################################
 ## Define PRIVATE_ variables from global vars
 ###########################################################
+my_target_global_cppflags := $(TARGET_GLOBAL_CPPFLAGS)
 ifdef LOCAL_SDK_VERSION
 my_target_project_includes :=
 my_target_c_includes := $(my_ndk_stl_include_path) $(my_ndk_version_root)/usr/include
@@ -163,13 +180,18 @@ ifeq ($(LOCAL_CLANG),true)
 my_target_global_cflags := $(TARGET_GLOBAL_CLANG_FLAGS)
 my_target_c_includes += $(CLANG_CONFIG_EXTRA_TARGET_C_INCLUDES)
 else
+ifneq ($(strip $(call intel-target-use-icc,$(LOCAL_MODULE))),)
+my_target_global_cflags   := $(TARGET_GLOBAL_ICC_CFLAGS)
+my_target_global_cppflags := $(TARGET_GLOBAL_ICC_CPPFLAGS)
+else
 my_target_global_cflags := $(TARGET_GLOBAL_CFLAGS)
+endif
 endif # LOCAL_CLANG
 
 $(LOCAL_INTERMEDIATE_TARGETS): PRIVATE_TARGET_PROJECT_INCLUDES := $(my_target_project_includes)
 $(LOCAL_INTERMEDIATE_TARGETS): PRIVATE_TARGET_C_INCLUDES := $(my_target_c_includes)
 $(LOCAL_INTERMEDIATE_TARGETS): PRIVATE_TARGET_GLOBAL_CFLAGS := $(my_target_global_cflags)
-$(LOCAL_INTERMEDIATE_TARGETS): PRIVATE_TARGET_GLOBAL_CPPFLAGS := $(TARGET_GLOBAL_CPPFLAGS)
+$(LOCAL_INTERMEDIATE_TARGETS): PRIVATE_TARGET_GLOBAL_CPPFLAGS := $(my_target_global_cppflags)
 
 ###########################################################
 ## Define PRIVATE_ variables used by multiple module types
@@ -177,6 +199,17 @@ $(LOCAL_INTERMEDIATE_TARGETS): PRIVATE_TARGET_GLOBAL_CPPFLAGS := $(TARGET_GLOBAL
 $(LOCAL_INTERMEDIATE_TARGETS): PRIVATE_NO_DEFAULT_COMPILER_FLAGS := \
     $(strip $(LOCAL_NO_DEFAULT_COMPILER_FLAGS))
 
+ifeq ($(LOCAL_IS_HOST_MODULE),)
+  ifneq ($(strip $(call intel-target-use-icc,$(LOCAL_MODULE))),)
+    ifeq ($(strip $(LOCAL_CC)),)
+      LOCAL_CC := $(TARGET_ICC)
+    endif
+    ifeq ($(strip $(LOCAL_CXX)),)
+      LOCAL_CXX:= $(TARGET_ICPC)
+    endif
+  endif
+endif
+
 ifeq ($(strip $(LOCAL_CC)),)
   ifeq ($(strip $(LOCAL_CLANG)),true)
     LOCAL_CC := $(CLANG)
diff --git a/core/combo/TARGET_linux-x86.mk b/core/combo/TARGET_linux-x86.mk
index 5a06f98..7493432 100644
--- a/core/combo/TARGET_linux-x86.mk
+++ b/core/combo/TARGET_linux-x86.mk
@@ -16,6 +16,7 @@
 
 # Configuration for Linux on x86 as a target.
 # Included by combo/select.mk
+DEFAULT_COMPILER:=gcc
 
 # Provide a default variant.
 ifeq ($(strip $(TARGET_ARCH_VARIANT)),)
@@ -176,12 +177,13 @@ TARGET_STRIP_MODULE:=true
 TARGET_DEFAULT_SYSTEM_SHARED_LIBRARIES := libc libstdc++ libm
 
 TARGET_CUSTOM_LD_COMMAND := true
+
 define transform-o-to-shared-lib-inner
 $(hide) $(PRIVATE_CXX) \
 	$(PRIVATE_TARGET_GLOBAL_LDFLAGS) \
 	 -nostdlib -Wl,-soname,$(notdir $@) \
 	 -shared -Bsymbolic \
-	$(TARGET_GLOBAL_CFLAGS) \
+	$(PRIVATE_TARGET_GLOBAL_CFLAGS) \
 	$(PRIVATE_TARGET_GLOBAL_LD_DIRS) \
 	$(if $(filter true,$(PRIVATE_NO_CRT)),,$(PRIVATE_TARGET_CRTBEGIN_SO_O)) \
 	$(PRIVATE_ALL_OBJECTS) \
@@ -206,6 +208,7 @@ $(hide) $(PRIVATE_CXX) \
 	-Wl,-dynamic-linker,/system/bin/linker \
 	-Wl,-z,nocopyreloc \
 	-fPIE -pie \
+	$(PRIVATE_TARGET_GLOBAL_CFLAGS) \
 	$(PRIVATE_TARGET_GLOBAL_LD_DIRS) \
 	-Wl,-rpath-link=$(TARGET_OUT_INTERMEDIATE_LIBRARIES) \
 	$(if $(filter true,$(PRIVATE_NO_CRT)),,$(PRIVATE_TARGET_CRTBEGIN_DYNAMIC_O)) \
@@ -229,6 +232,7 @@ $(hide) $(PRIVATE_CXX) \
 	$(PRIVATE_TARGET_GLOBAL_LDFLAGS) \
 	-nostdlib -Bstatic \
 	-o $@ \
+	$(PRIVATE_TARGET_GLOBAL_CFLAGS) \
 	$(PRIVATE_TARGET_GLOBAL_LD_DIRS) \
 	$(if $(filter true,$(PRIVATE_NO_CRT)),,$(PRIVATE_TARGET_CRTBEGIN_STATIC_O)) \
 	$(PRIVATE_LDFLAGS) \
diff --git a/core/config.mk b/core/config.mk
index 256fe4e..a4b3f52 100644
--- a/core/config.mk
+++ b/core/config.mk
@@ -457,6 +457,9 @@ endif
 # define llvm tools and global flags
 include $(BUILD_SYSTEM)/llvm_config.mk
 
+# define icc tools and global flags
+include $(BUILD_SYSTEM)/icc_config.mk
+
 # ###############################################################
 # Collect a list of the SDK versions that we could compile against
 # For use with the LOCAL_SDK_VERSION variable for include $(BUILD_PACKAGE)
diff --git a/core/icc_config.mk b/core/icc_config.mk
new file mode 100644
index 0000000..4285380
--- /dev/null
+++ b/core/icc_config.mk
@@ -0,0 +1,166 @@
+# Forces the following modules to be compiled with Intel* compiler independent of DEFAULT_COMPILER
+ICC_MODULES     :=
+# Forces the following modules to be compiled with GNU* compiler independent of DEFAULT_COMPILER
+GCC_MODULES     :=
+# Modules that are compiled with -ipo if configured to be compiled with Intel compiler
+ICC_IPO_MODULES := libc_common libc_nomalloc libc libcutils liblog
+ICC_IPO_MODULES += libdvm dexdump dvz dalvikvm
+ICC_IPO_MODULES += libxslt libxml2 libskia libskiagpu
+ICC_IPO_MODULES += libwebcore libv8 libhyphenation
+ICC_IPO_MODULES += libva_videoencoder libva_videodecoder libmixvideo libmixcommon libmfldadvci
+ICC_IPO_MODULES += libSh3a libmixvbp libasfparser libft2 libicui18n libicuuc
+ICC_IPO_MODULES += libfdlibm libdex libpvr2d
+# Enable source-code modifications for improved vectorization in libskia and libskiagpu
+# Set ENABLE_ICC_MOD to empty string to disable modifications
+ENABLE_ICC_MOD  := true
+
+# Modules that require -ffreestanding to avoid dependence on libintlc
+# Applies only to modules that are configured to be built with icc
+ICC_FREESTANDING_MODULES := libc_common libc_nomalloc libc libc_malloc_debug_leak libc_malloc_debug_qemu libbionic_ssp libc_netbsd
+ICC_FREESTANDING_MODULES += libdl libm linker update_osip libosip
+
+TARGET_ICC_TOOLS_PREFIX := \
+	prebuilts/PRIVATE/icc/linux-x86/x86/x86-android-linux-12.1/bin/
+
+TARGET_ICC     := $(abspath $(TARGET_ICC_TOOLS_PREFIX)icc)
+TARGET_ICPC    := $(abspath $(TARGET_ICC_TOOLS_PREFIX)icpc)
+TARGET_XIAR    := $(abspath $(TARGET_ICC_TOOLS_PREFIX)xiar)
+TARGET_XILD    := $(abspath $(TARGET_ICC_TOOLS_PREFIX)xild)
+
+export ANDROID_GNU_X86_TOOLCHAIN:=$(abspath $(dir $(TARGET_TOOLS_PREFIX)))/../
+export ANDROID_SYSROOT:=
+
+ifeq ($(strip $(DEFAULT_COMPILER)),gcc)
+  ifneq ($(strip $(ICC_MODULES)),)
+    intel-target-need-intel-libraries:=true
+  else
+    intel-target-need-intel-libraries:=
+  endif
+  define intel-target-use-icc
+    $(if $(filter $(strip $1),$(ICC_MODULES)),true)
+  endef
+else
+  intel-target-need-intel-libraries:=true
+  define intel-target-use-icc
+    $(if $(filter $(strip $1),$(GCC_MODULES)),,$(if $(strip $(LOCAL_CLANG)),,true))
+  endef
+endif
+
+define intel-target-cc
+  $(if $(strip $(call intel-target-use-icc,$1)),$(TARGET_ICC),$(abspath $(TARGET_CC)))
+endef
+
+define intel-target-cxx
+  $(if $(strip $(call intel-target-use-icc,$1)),$(TARGET_ICPC),$(abspath $(TARGET_CXX)))
+endef
+
+define intel-target-ipo-enable
+  $(and $(strip $(call intel-target-use-icc,$1)),$(filter $(strip $1),$(ICC_IPO_MODULES)))
+endef
+
+define intel-target-freestanding-enable
+  $(and $(strip $(call intel-target-use-icc,$1)),$(filter $(strip $1),$(ICC_FREESTANDING_MODULES)))
+endef
+
+ifneq ($(call intel-target-need-intel-libraries),)
+  ICC_COMPILER_LIBRARIES := libsvml libimf libintlc
+  TARGET_DEFAULT_SYSTEM_SHARED_LIBRARIES := $(ICC_COMPILER_LIBRARIES) $(TARGET_DEFAULT_SYSTEM_SHARED_LIBRARIES)
+  TARGET_AR            := $(TARGET_XIAR)
+  TARGET_LD            := $(TARGET_XILD)
+endif
+
+define do-icc-flags-subst
+  $(1) := $(subst $(2),$(3),$($(1)))
+endef
+
+define icc-flags-subst
+  $(eval $(call do-icc-flags-subst,$(1),$(2),$(3)))
+endef
+
+TARGET_GLOBAL_ICC_CFLAGS := $(TARGET_GLOBAL_CFLAGS)
+TARGET_GLOBAL_ICC_CFLAGS += -no-prec-div
+TARGET_GLOBAL_ICC_CFLAGS += -fno-builtin-memset -fno-builtin-strcmp -fno-builtin-strlen -fno-builtin-strchr
+TARGET_GLOBAL_ICC_CFLAGS += -fno-builtin-cos -fno-builtin-sin -fno-builtin-tan
+TARGET_GLOBAL_ICC_CFLAGS += -restrict -i_nopreempt -Bsymbolic
+TARGET_GLOBAL_ICC_CFLAGS += -diag-disable 144,556,279,803,2646,589,83,290,180,1875 #-diag-error 592,117,1101
+TARGET_GLOBAL_ICC_CFLAGS += -g1
+TARGET_GLOBAL_ICC_CFLAGS += -D__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4
+
+$(call icc-flags-subst,TARGET_GLOBAL_ICC_CFLAGS,-mstackrealign,-falign-stack=assume-4-byte)
+$(call icc-flags-subst,TARGET_GLOBAL_ICC_CFLAGS,-O2,-O3)
+$(call icc-flags-subst,TARGET_GLOBAL_ICC_CFLAGS,-march=atom,-xSSSE3_ATOM)
+$(call icc-flags-subst,TARGET_GLOBAL_ICC_CFLAGS,-msse3,)
+$(call icc-flags-subst,TARGET_GLOBAL_ICC_CFLAGS,-mfpmath=sse,)
+# icc generates pic by default.
+# TARGET_GLOBAL_CFLAGS are passed to linker and override -fno-pic for link-time optimization in webkit
+$(call icc-flags-subst,TARGET_GLOBAL_ICC_CFLAGS,-fPIC,)
+$(call icc-flags-subst,TARGET_GLOBAL_ICC_CFLAGS,-fPIE,)
+# bionic is the only libc configuration of Intel* compiler for Android*
+$(call icc-flags-subst,TARGET_GLOBAL_ICC_CFLAGS,-mbionic,)
+# Unsupported options
+$(call icc-flags-subst,TARGET_GLOBAL_ICC_CFLAGS,-fno-inline-functions-called-once,)
+$(call icc-flags-subst,TARGET_GLOBAL_ICC_CFLAGS,-funswitch-loops,)
+$(call icc-flags-subst,TARGET_GLOBAL_ICC_CFLAGS,-funwind-tables,)
+
+TARGET_GLOBAL_ICC_CPPFLAGS := $(TARGET_GLOBAL_CPPFLAGS)
+$(call icc-flags-subst,TARGET_GLOBAL_ICC_CPPFLAGS,-fno-use-cxa-atexit,)
+TARGET_GLOBAL_ICC_CPPFLAGS += -Qoption,c,--use_atexit
+
+#Called from core/binary.mk
+define do-icc-flags
+  $(call icc-flags-subst,LOCAL_CFLAGS,-march=atom,-xSSSE3_ATOM)
+  $(call icc-flags-subst,LOCAL_CFLAGS,-mtune=atom,-xSSSE3_ATOM)
+  $(call icc-flags-subst,LOCAL_CFLAGS,-msse3,-xSSSE3_ATOM)
+  ifneq ($(strip $(call intel-target-freestanding-enable,$(LOCAL_MODULE))),)
+    LOCAL_CFLAGS   += -ffreestanding
+  endif
+  ifneq ($(strip $(call intel-target-ipo-enable,$(LOCAL_MODULE))),)
+    LOCAL_CFLAGS   += -ipo -g0
+    LOCAL_LDFLAGS  += -ipo4
+  endif
+  ifneq ($(strip $(ENABLE_ICC_MOD)),)
+    ifeq ($(strip $(LOCAL_MODULE)),libskia)
+      LOCAL_CFLAGS += -DICC_SKIA
+    endif
+    ifeq ($(strip $(LOCAL_MODULE)),libskiagpu)
+      LOCAL_CFLAGS += -DICC_SKIA
+    endif
+  endif
+  ifeq ($(strip $(LOCAL_MODULE)),libwebcore)
+    LOCAL_CFLAGS += -g0
+  endif
+endef
+
+#Called from core/binary.mk
+define do-icc-libs
+  ifneq ($(filter libpng,$(LOCAL_STATIC_LIBRARIES)),)
+    LOCAL_STATIC_LIBRARIES += libimf_s
+  endif
+  ifneq ($(filter libc,$(LOCAL_SYSTEM_SHARED_LIBRARIES)),)
+    ifeq ($(filter libintlc,$(LOCAL_SYSTEM_SHARED_LIBRARIES)),)
+      ifeq ($(strip $(call intel-target-freestanding-enable,$(LOCAL_MODULE))),)
+        LOCAL_SYSTEM_SHARED_LIBRARIES += libintlc
+      endif
+    endif
+  endif
+  # Stack protector support functions live in libirc.a
+  ifeq ($(filter libintlc,$(LOCAL_SYSTEM_SHARED_LIBRARIES)),)
+    LOCAL_STATIC_LIBRARIES += libirc
+  endif
+  ifeq ($(strip $(LOCAL_MODULE)),linker)
+    LOCAL_STATIC_LIBRARIES += libirc
+  endif
+  ifneq ($(filter libm,$(LOCAL_SYSTEM_SHARED_LIBRARIES)),)
+    ifeq ($(filter libimf,$(LOCAL_SYSTEM_SHARED_LIBRARIES)),)
+      LOCAL_SYSTEM_SHARED_LIBRARIES := $(patsubst libm,libimf libm,$(LOCAL_SYSTEM_SHARED_LIBRARIES))
+    endif
+  endif
+endef
+
+define icc-flags
+  $(eval $(call do-icc-flags))
+endef
+
+define icc-libs
+  $(eval $(call do-icc-libs))
+endef
-- 
2.7.4

